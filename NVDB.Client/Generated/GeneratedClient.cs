//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace NVDB.Client.Generated
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GeneratedClient 
    {
        private string _baseUrl = "https://nvdbapiles-v3.atlas.vegvesen.no";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public GeneratedClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Liste med alle tilgjengelige resursser</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> AnonymousAsync(string x_Client, string x_Client_Session)
        {
            return AnonymousAsync(x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Liste med alle tilgjengelige resursser</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> AnonymousAsync(string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous6>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="statistikk">Om statistikk skal inkluderes.</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <returns>Uten request-parametre lister dette endepunktet ut lenke til vegobjekter av hver vegobjekttype med statistikk.
        /// <br/>Med parametre listes ut de vegobjekttypene som passer med filtrene definert av parametrene.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VegobjekttypeStatistikk>> VegobjekterAllAsync(string x_Client, string x_Client_Session, bool? statistikk, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp)
        {
            return VegobjekterAllAsync(x_Client, x_Client_Session, statistikk, fylke, kommune, kontraktsomrade, riksvegrute, gate, vegsystemreferanse, veglenkesekvens, kartutsnitt, polygon, tidspunkt, overlapp, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="statistikk">Om statistikk skal inkluderes.</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <returns>Uten request-parametre lister dette endepunktet ut lenke til vegobjekter av hver vegobjekttype med statistikk.
        /// <br/>Med parametre listes ut de vegobjekttypene som passer med filtrene definert av parametrene.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VegobjekttypeStatistikk>> VegobjekterAllAsync(string x_Client, string x_Client_Session, bool? statistikk, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter?");
            if (statistikk != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("statistikk") + "=").Append(System.Uri.EscapeDataString(ConvertToString(statistikk, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (veglenkesekvens != null)
            {
                foreach (var item_ in veglenkesekvens) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenkesekvens") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (overlapp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overlapp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overlapp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VegobjekttypeStatistikk>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <returns>Uten request-parametre lister dette endepunktet ut lenke til vegobjekter av hver vegobjekttype med statistikk.
        /// <br/>Med parametre listes ut de vegobjekttypene som passer med filtrene definert av parametrene.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VegobjekttypeStatistikk>> StatistikkAllAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp)
        {
            return StatistikkAllAsync(x_Client, x_Client_Session, fylke, kommune, kontraktsomrade, riksvegrute, gate, vegsystemreferanse, veglenkesekvens, kartutsnitt, polygon, tidspunkt, overlapp, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <returns>Uten request-parametre lister dette endepunktet ut lenke til vegobjekter av hver vegobjekttype med statistikk.
        /// <br/>Med parametre listes ut de vegobjekttypene som passer med filtrene definert av parametrene.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VegobjekttypeStatistikk>> StatistikkAllAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/statistikk?");
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (veglenkesekvens != null)
            {
                foreach (var item_ in veglenkesekvens) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenkesekvens") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (overlapp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overlapp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overlapp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VegobjekttypeStatistikk>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for vegobjekttype som skal hentes.</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="segmentering">Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <param name="arm">Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»</param>
        /// <param name="veglenketype">Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.</param>
        /// <param name="adskiltelop">Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="detaljniva">Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).</param>
        /// <param name="kryssystem">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem</param>
        /// <param name="sideanlegg">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="antall">Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.</param>
        /// <param name="start">Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.</param>
        /// <param name="egenskap">Filtrer vegobjekter på egenskapene de har
        /// <br/>Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap="&lt;egenskapstype&gt;&lt;operator&gt;&lt;verdi&gt;"`
        /// <br/>          Det er støtte for følgende operatorer:
        /// <br/>* `=` - lik
        /// <br/>* `!=` - ulik
        /// <br/>* `&lt;` - større enn
        /// <br/>* `&gt;` - mindre enn,
        /// <br/>* `&gt;=` - større enn, eller lik
        /// <br/>* `&lt;=` - mindre enn, eller lik
        /// <br/>
        /// <br/>Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato.
        /// <br/>Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall.
        /// <br/>Tekst og tidspunkt må markeres med enkle anførselstegn.
        /// <br/>For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id.
        /// <br/>Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper.
        /// <br/>Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger.
        /// <br/>Wildcard * kan benyttes for tekst og datoer.
        /// <br/>Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).
        /// <br/>
        /// <br/>*Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret.
        /// <br/>Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter.
        /// <br/>Relaterte objekter filtreres ved bruk av funksjonen relasjon.
        /// <br/>Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter.
        /// <br/>Eksempel: `?egenskap="relasjon(67, egenskap(1317)&gt;2000"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)</param>
        /// <param name="ider">Hent objekter med de oppgitte idene. Kommaseparert.</param>
        /// <param name="alle_versjoner">Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.</param>
        /// <param name="endret_etter">hent alle objekter som er endret etter det gitte tidspunkt.</param>
        /// <returns>Vegobjekter av den oppgitte vegobjekttypen med eventuelle filtre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VegobjektListeRespons> VegobjekterAsync(string x_Client, string x_Client_Session, int vegobjekttypeid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Srid? srid, Geometritoleranse? geometritoleranse, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, bool? segmentering, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp, bool? arm, System.Collections.Generic.IEnumerable<Anonymous2> veglenketype, Adskiltelop? adskiltelop, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, Detaljniva2? detaljniva, bool? kryssystem, bool? sideanlegg, Trafikantgruppe? trafikantgruppe, int? antall, string start, string egenskap, System.Collections.Generic.IEnumerable<int> ider, bool? alle_versjoner, System.DateTimeOffset? endret_etter)
        {
            return VegobjekterAsync(x_Client, x_Client_Session, vegobjekttypeid, inkluder, srid, geometritoleranse, inkludergeometri, inkluder_egenskaper, segmentering, fylke, kommune, kontraktsomrade, riksvegrute, gate, vegsystemreferanse, veglenkesekvens, kartutsnitt, polygon, tidspunkt, overlapp, arm, veglenketype, adskiltelop, typeveg, detaljniva, kryssystem, sideanlegg, trafikantgruppe, antall, start, egenskap, ider, alle_versjoner, endret_etter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for vegobjekttype som skal hentes.</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="segmentering">Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <param name="arm">Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»</param>
        /// <param name="veglenketype">Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.</param>
        /// <param name="adskiltelop">Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="detaljniva">Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).</param>
        /// <param name="kryssystem">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem</param>
        /// <param name="sideanlegg">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="antall">Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.</param>
        /// <param name="start">Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.</param>
        /// <param name="egenskap">Filtrer vegobjekter på egenskapene de har
        /// <br/>Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap="&lt;egenskapstype&gt;&lt;operator&gt;&lt;verdi&gt;"`
        /// <br/>          Det er støtte for følgende operatorer:
        /// <br/>* `=` - lik
        /// <br/>* `!=` - ulik
        /// <br/>* `&lt;` - større enn
        /// <br/>* `&gt;` - mindre enn,
        /// <br/>* `&gt;=` - større enn, eller lik
        /// <br/>* `&lt;=` - mindre enn, eller lik
        /// <br/>
        /// <br/>Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato.
        /// <br/>Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall.
        /// <br/>Tekst og tidspunkt må markeres med enkle anførselstegn.
        /// <br/>For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id.
        /// <br/>Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper.
        /// <br/>Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger.
        /// <br/>Wildcard * kan benyttes for tekst og datoer.
        /// <br/>Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).
        /// <br/>
        /// <br/>*Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret.
        /// <br/>Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter.
        /// <br/>Relaterte objekter filtreres ved bruk av funksjonen relasjon.
        /// <br/>Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter.
        /// <br/>Eksempel: `?egenskap="relasjon(67, egenskap(1317)&gt;2000"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)</param>
        /// <param name="ider">Hent objekter med de oppgitte idene. Kommaseparert.</param>
        /// <param name="alle_versjoner">Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.</param>
        /// <param name="endret_etter">hent alle objekter som er endret etter det gitte tidspunkt.</param>
        /// <returns>Vegobjekter av den oppgitte vegobjekttypen med eventuelle filtre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VegobjektListeRespons> VegobjekterAsync(string x_Client, string x_Client_Session, int vegobjekttypeid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Srid? srid, Geometritoleranse? geometritoleranse, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, bool? segmentering, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp, bool? arm, System.Collections.Generic.IEnumerable<Anonymous2> veglenketype, Adskiltelop? adskiltelop, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, Detaljniva2? detaljniva, bool? kryssystem, bool? sideanlegg, Trafikantgruppe? trafikantgruppe, int? antall, string start, string egenskap, System.Collections.Generic.IEnumerable<int> ider, bool? alle_versjoner, System.DateTimeOffset? endret_etter, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/{vegobjekttypeid}?");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geometritoleranse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geometritoleranse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geometritoleranse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkludergeometri != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkludergeometri") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkludergeometri, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder_egenskaper != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkluder_egenskaper") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkluder_egenskaper, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (segmentering != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("segmentering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(segmentering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (veglenkesekvens != null)
            {
                foreach (var item_ in veglenkesekvens) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenkesekvens") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (overlapp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overlapp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overlapp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veglenketype != null)
            {
                foreach (var item_ in veglenketype) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenketype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (adskiltelop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adskiltelop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adskiltelop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (typeveg != null)
            {
                foreach (var item_ in typeveg) { urlBuilder_.Append(System.Uri.EscapeDataString("typeveg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (detaljniva != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detaljniva") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detaljniva, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kryssystem != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kryssystem") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kryssystem, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sideanlegg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sideanlegg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sideanlegg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trafikantgruppe != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trafikantgruppe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trafikantgruppe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (antall != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("antall") + "=").Append(System.Uri.EscapeDataString(ConvertToString(antall, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (egenskap != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("egenskap") + "=").Append(System.Uri.EscapeDataString(ConvertToString(egenskap, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ider != null)
            {
                foreach (var item_ in ider) { urlBuilder_.Append(System.Uri.EscapeDataString("ider") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (alle_versjoner != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("alle_versjoner") + "=").Append(System.Uri.EscapeDataString(ConvertToString(alle_versjoner, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endret_etter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endret_etter") + "=").Append(System.Uri.EscapeDataString(endret_etter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VegobjektListeRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for vegobjekttype som skal hentes statistikk for.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="segmentering">Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <param name="arm">Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»</param>
        /// <param name="veglenketype">Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.</param>
        /// <param name="adskiltelop">Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="detaljniva">Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).</param>
        /// <param name="kryssystem">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem</param>
        /// <param name="sideanlegg">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="egenskap">Filtrer vegobjekter på egenskapene de har
        /// <br/>Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap="&lt;egenskapstype&gt;&lt;operator&gt;&lt;verdi&gt;"`
        /// <br/>          Det er støtte for følgende operatorer:
        /// <br/>* `=` - lik
        /// <br/>* `!=` - ulik
        /// <br/>* `&lt;` - større enn
        /// <br/>* `&gt;` - mindre enn,
        /// <br/>* `&gt;=` - større enn, eller lik
        /// <br/>* `&lt;=` - mindre enn, eller lik
        /// <br/>
        /// <br/>Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato.
        /// <br/>Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall.
        /// <br/>Tekst og tidspunkt må markeres med enkle anførselstegn.
        /// <br/>For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id.
        /// <br/>Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper.
        /// <br/>Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger.
        /// <br/>Wildcard * kan benyttes for tekst og datoer.
        /// <br/>Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).
        /// <br/>
        /// <br/>*Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret.
        /// <br/>Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter.
        /// <br/>Relaterte objekter filtreres ved bruk av funksjonen relasjon.
        /// <br/>Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter.
        /// <br/>Eksempel: `?egenskap="relasjon(67, egenskap(1317)&gt;2000"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)</param>
        /// <param name="alle_versjoner">Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.</param>
        /// <param name="endret_etter">hent alle objekter som er endret etter det gitte tidspunkt.</param>
        /// <returns>Vegobjekter av den oppgitte vegobjekttypen med eventuelle filtre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Statistikk> StatistikkAsync(string x_Client, string x_Client_Session, int vegobjekttypeid, Srid? srid, bool? segmentering, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp, bool? arm, System.Collections.Generic.IEnumerable<Anonymous2> veglenketype, Adskiltelop? adskiltelop, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, Detaljniva2? detaljniva, bool? kryssystem, bool? sideanlegg, Trafikantgruppe? trafikantgruppe, string egenskap, bool? alle_versjoner, System.DateTimeOffset? endret_etter)
        {
            return StatistikkAsync(x_Client, x_Client_Session, vegobjekttypeid, srid, segmentering, fylke, kommune, kontraktsomrade, riksvegrute, gate, vegsystemreferanse, veglenkesekvens, kartutsnitt, polygon, tidspunkt, overlapp, arm, veglenketype, adskiltelop, typeveg, detaljniva, kryssystem, sideanlegg, trafikantgruppe, egenskap, alle_versjoner, endret_etter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for vegobjekttype som skal hentes statistikk for.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="segmentering">Angir om strekningsobjekter skal segmenteres etter søkeområdet (fylke, kommune, vegsystemreferanse, kontraksområde, riksvegrute, veglenkesekvens).</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `[fra[-til]]@veglenkesekvensid` Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="overlapp">Filtrer på objekter som er stedfestet på samme sted i vegnettet. Format: `?overlapp=&lt;objekttypeid&gt;[(egenskap(attributtid)="verdi" eller enumid)] [Eksempler](https://api.vegdata.no/parameter/avansertefilter.html#filtrering-på-objekter-som-er-stedfestet-på-samme-sted-overlapp)</param>
        /// <param name="arm">Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»</param>
        /// <param name="veglenketype">Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.</param>
        /// <param name="adskiltelop">Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="detaljniva">Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).</param>
        /// <param name="kryssystem">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem</param>
        /// <param name="sideanlegg">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="egenskap">Filtrer vegobjekter på egenskapene de har
        /// <br/>Egenskapsfilter består av egenskapstypeid, operator og verdi, `?egenskap="&lt;egenskapstype&gt;&lt;operator&gt;&lt;verdi&gt;"`
        /// <br/>          Det er støtte for følgende operatorer:
        /// <br/>* `=` - lik
        /// <br/>* `!=` - ulik
        /// <br/>* `&lt;` - større enn
        /// <br/>* `&gt;` - mindre enn,
        /// <br/>* `&gt;=` - større enn, eller lik
        /// <br/>* `&lt;=` - mindre enn, eller lik
        /// <br/>
        /// <br/>Større enn- og mindre enn-operatorene er kun relevant for egenskapstyper av type tall eller dato.
        /// <br/>Verdien skal være i henhold til egenskapstypens datatype, og er som oftest en tekst eller et tall.
        /// <br/>Tekst og tidspunkt må markeres med enkle anførselstegn.
        /// <br/>For egenskapstyper med forhåndsdefinerte verdier, er det for øyeblikket kun mulig å bruke verdiens id.
        /// <br/>Bruk null som verdi for å finne objekter som har, eller ikke har, verdi på bestemte egenskapstyper.
        /// <br/>Syntaksen for spørrespråket støtter bruk av paranteser og AND/OR-sammenhenger.
        /// <br/>Wildcard * kan benyttes for tekst og datoer.
        /// <br/>Merk! Egenskapstyper med datatype struktur er ikke søkbare. Du vil få 0 treff for ÅDT-fordeling (606069).
        /// <br/>
        /// <br/>*Filtrering på relasjoner*: Filtrering på egenskaper i relaterte objekter gjøres også i egenskapsfilteret.
        /// <br/>Objekter er relatert ved at de har relasjoner til andre objekter. Foreløpig støtter API-et kun filtrering på datter-objekter.
        /// <br/>Relaterte objekter filtreres ved bruk av funksjonen relasjon.
        /// <br/>Denne funksjonen tar en objekttype ID som første parameter, og et nytt egenskapsfilter som andre parameter.
        /// <br/>Eksempel: `?egenskap="relasjon(67, egenskap(1317)&gt;2000"` (Tunneler (581) som har Tunnelløp (67) med Lengde (1317) over 2 km)</param>
        /// <param name="alle_versjoner">Returner alle versjoner som matcher de oppgitte parametrene. Dersom ikke fraværende eller `false` vil kun objekter uten tildato returneres.</param>
        /// <param name="endret_etter">hent alle objekter som er endret etter det gitte tidspunkt.</param>
        /// <returns>Vegobjekter av den oppgitte vegobjekttypen med eventuelle filtre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Statistikk> StatistikkAsync(string x_Client, string x_Client_Session, int vegobjekttypeid, Srid? srid, bool? segmentering, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<string> veglenkesekvens, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, string overlapp, bool? arm, System.Collections.Generic.IEnumerable<Anonymous2> veglenketype, Adskiltelop? adskiltelop, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, Detaljniva2? detaljniva, bool? kryssystem, bool? sideanlegg, Trafikantgruppe? trafikantgruppe, string egenskap, bool? alle_versjoner, System.DateTimeOffset? endret_etter, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/{vegobjekttypeid}/statistikk?");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (segmentering != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("segmentering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(segmentering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (veglenkesekvens != null)
            {
                foreach (var item_ in veglenkesekvens) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenkesekvens") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (overlapp != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overlapp") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overlapp, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veglenketype != null)
            {
                foreach (var item_ in veglenketype) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenketype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (adskiltelop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adskiltelop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adskiltelop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (typeveg != null)
            {
                foreach (var item_ in typeveg) { urlBuilder_.Append(System.Uri.EscapeDataString("typeveg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (detaljniva != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detaljniva") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detaljniva, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kryssystem != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kryssystem") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kryssystem, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sideanlegg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sideanlegg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sideanlegg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trafikantgruppe != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trafikantgruppe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trafikantgruppe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (egenskap != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("egenskap") + "=").Append(System.Uri.EscapeDataString(ConvertToString(egenskap, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (alle_versjoner != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("alle_versjoner") + "=").Append(System.Uri.EscapeDataString(ConvertToString(alle_versjoner, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endret_etter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endret_etter") + "=").Append(System.Uri.EscapeDataString(endret_etter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Statistikk>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="dybde">Hvor mange nivå datterobjekter som skal inkluderes</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Vegobjekter2Async(string x_Client, string x_Client_Session, int vegobjekttypeid, long vegobjektid, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, Geometritoleranse? geometritoleranse, Dybde? dybde)
        {
            return Vegobjekter2Async(x_Client, x_Client_Session, vegobjekttypeid, vegobjektid, srid, inkluder, inkludergeometri, inkluder_egenskaper, geometritoleranse, dybde, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="dybde">Hvor mange nivå datterobjekter som skal inkluderes</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Vegobjekter2Async(string x_Client, string x_Client_Session, int vegobjekttypeid, long vegobjektid, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, Geometritoleranse? geometritoleranse, Dybde? dybde, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            if (vegobjektid == null)
                throw new System.ArgumentNullException("vegobjektid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/{vegobjekttypeid}/{vegobjektid}?");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{vegobjektid}", System.Uri.EscapeDataString(ConvertToString(vegobjektid, System.Globalization.CultureInfo.InvariantCulture)));
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (inkludergeometri != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkludergeometri") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkludergeometri, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder_egenskaper != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkluder_egenskaper") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkluder_egenskaper, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geometritoleranse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geometritoleranse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geometritoleranse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dybde != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dybde") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dybde, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 303)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Redirect til siste versjon av objektet", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="versjon">versjon av objektet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="dybde">Hvor mange nivå datterobjekter som skal inkluderes</param>
        /// <returns>Objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Vegobjekt> Vegobjekter3Async(string x_Client, string x_Client_Session, int vegobjekttypeid, long vegobjektid, int versjon, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, Geometritoleranse? geometritoleranse, Dybde? dybde)
        {
            return Vegobjekter3Async(x_Client, x_Client_Session, vegobjekttypeid, vegobjektid, versjon, srid, inkluder, inkludergeometri, inkluder_egenskaper, geometritoleranse, dybde, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="versjon">versjon av objektet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="dybde">Hvor mange nivå datterobjekter som skal inkluderes</param>
        /// <returns>Objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Vegobjekt> Vegobjekter3Async(string x_Client, string x_Client_Session, int vegobjekttypeid, long vegobjektid, int versjon, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, Geometritoleranse? geometritoleranse, Dybde? dybde, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            if (vegobjektid == null)
                throw new System.ArgumentNullException("vegobjektid");

            if (versjon == null)
                throw new System.ArgumentNullException("versjon");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/{vegobjekttypeid}/{vegobjektid}/{versjon}?");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{vegobjektid}", System.Uri.EscapeDataString(ConvertToString(vegobjektid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{versjon}", System.Uri.EscapeDataString(ConvertToString(versjon, System.Globalization.CultureInfo.InvariantCulture)));
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (inkludergeometri != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkludergeometri") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkludergeometri, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder_egenskaper != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkluder_egenskaper") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkluder_egenskaper, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geometritoleranse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geometritoleranse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geometritoleranse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dybde != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dybde") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dybde, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vegobjekt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="dybde">Hvor mange nivå datterobjekter som skal inkluderes</param>
        /// <returns>Versjoner av objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vegobjekt>> VersjonerAsync(string x_Client, string x_Client_Session, int vegobjekttypeid, long vegobjektid, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, Geometritoleranse? geometritoleranse, Dybde? dybde)
        {
            return VersjonerAsync(x_Client, x_Client_Session, vegobjekttypeid, vegobjektid, srid, inkluder, inkludergeometri, inkluder_egenskaper, geometritoleranse, dybde, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <param name="inkludergeometri">Et vegobjekt har opptil to geometrier, egengeometri og stedfestet geometri.
        /// <br/>Egengeoemtrien er plassert under `vegobjekt.egenskaper` om den finnes, stedfestet geometri er plassert under `vegobjekt.lokasjon`.
        /// <br/>I tillegg til de nevnte feltene på vegobjekt-responsen returneres også `vegobjekt.geometri` (dersom man har inkluder=geometri eller alle),
        /// <br/>slik at man alltid finner geometrien for vegobjektet ett sted. Dette feltet er egengeometri dersom objektet har det, hvis ikke har feltet stedfestet geometri
        /// <br/>Ved hvilken av disse som er tilfelle finner man ut ved å se på `vegobjekt.geometri.egengeometri`</param>
        /// <param name="inkluder_egenskaper">Gir mulighet til å filtrere hvilke egenskaper som skal returneres med `inkluder=egenskaper`.
        /// <br/>`basis` er alle egenskaper som ikke er assosiasjoner, stedfesting, geometri, eller lister av disse.</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <param name="dybde">Hvor mange nivå datterobjekter som skal inkluderes</param>
        /// <returns>Versjoner av objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vegobjekt>> VersjonerAsync(string x_Client, string x_Client_Session, int vegobjekttypeid, long vegobjektid, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous> inkluder, Inkludergeometri? inkludergeometri, Inkluder_egenskaper? inkluder_egenskaper, Geometritoleranse? geometritoleranse, Dybde? dybde, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            if (vegobjektid == null)
                throw new System.ArgumentNullException("vegobjektid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/{vegobjekttypeid}/{vegobjektid}/versjoner?");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{vegobjektid}", System.Uri.EscapeDataString(ConvertToString(vegobjektid, System.Globalization.CultureInfo.InvariantCulture)));
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (inkludergeometri != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkludergeometri") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkludergeometri, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder_egenskaper != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkluder_egenskaper") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkluder_egenskaper, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geometritoleranse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geometritoleranse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geometritoleranse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dybde != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dybde") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dybde, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Vegobjekt>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="versjon">versjon av objektet</param>
        /// <param name="egenskapid">Id for binæregenskapen som refererer til blob</param>
        /// <param name="binaerobjektid">blob_id fra binæregenskap</param>
        /// <returns>Versjoner av objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> BinaerAsync(int vegobjekttypeid, long vegobjektid, int versjon, int egenskapid, int binaerobjektid)
        {
            return BinaerAsync(vegobjekttypeid, vegobjektid, versjon, egenskapid, binaerobjektid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vegobjekttypeid">Id for objektets vegobjekttype</param>
        /// <param name="vegobjektid">Id for objektet</param>
        /// <param name="versjon">versjon av objektet</param>
        /// <param name="egenskapid">Id for binæregenskapen som refererer til blob</param>
        /// <param name="binaerobjektid">blob_id fra binæregenskap</param>
        /// <returns>Versjoner av objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> BinaerAsync(int vegobjekttypeid, long vegobjektid, int versjon, int egenskapid, int binaerobjektid, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            if (vegobjektid == null)
                throw new System.ArgumentNullException("vegobjektid");

            if (versjon == null)
                throw new System.ArgumentNullException("versjon");

            if (egenskapid == null)
                throw new System.ArgumentNullException("egenskapid");

            if (binaerobjektid == null)
                throw new System.ArgumentNullException("binaerobjektid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekter/{vegobjekttypeid}/{vegobjektid}/{versjon}/egenskaper/{egenskapid}/{binaerobjektid}/binaer");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{vegobjektid}", System.Uri.EscapeDataString(ConvertToString(vegobjektid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{versjon}", System.Uri.EscapeDataString(ConvertToString(versjon, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{egenskapid}", System.Uri.EscapeDataString(ConvertToString(egenskapid, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{binaerobjektid}", System.Uri.EscapeDataString(ConvertToString(binaerobjektid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="id">Id for objektet</param>
        /// <param name="sluttDato">Sluttdato til et objekt. Henter ut riktig versjon hvis oppgitt dato stemmer overens med en versjons sluttdato. Dato kan være kun et år (f.eks 2008), eller en spesifikk dato i YYYY-MM-DD-format (f.eks. 2021-05-30)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task VegobjektAsync(string x_Client, string x_Client_Session, int? id, string sluttDato)
        {
            return VegobjektAsync(x_Client, x_Client_Session, id, sluttDato, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="id">Id for objektet</param>
        /// <param name="sluttDato">Sluttdato til et objekt. Henter ut riktig versjon hvis oppgitt dato stemmer overens med en versjons sluttdato. Dato kan være kun et år (f.eks 2008), eller en spesifikk dato i YYYY-MM-DD-format (f.eks. 2021-05-30)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task VegobjektAsync(string x_Client, string x_Client_Session, int? id, string sluttDato, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekt?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sluttDato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sluttDato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sluttDato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 303)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Redirect til siste versjon av objektet", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">Angir hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata.</param>
        /// <param name="kategori">Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier)</param>
        /// <returns>Vegobjekttyper</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vegobjekttype>> VegobjekttyperAsync(string x_Client, string x_Client_Session, string if_None_Match, Inkluder? inkluder, int? kategori)
        {
            return VegobjekttyperAsync(x_Client, x_Client_Session, if_None_Match, inkluder, kategori, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">Angir hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata.</param>
        /// <param name="kategori">Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier)</param>
        /// <returns>Vegobjekttyper</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vegobjekttype>> VegobjekttyperAsync(string x_Client, string x_Client_Session, string if_None_Match, Inkluder? inkluder, int? kategori, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper?");
            if (inkluder != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkluder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kategori != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kategori") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kategori, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Vegobjekttype>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">Angir hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata.</param>
        /// <param name="kategori">Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier)</param>
        /// <returns>Versjoner av objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vegobjekttype>> Vegobjekttyper2Async(int vegobjekttypeid, string x_Client, string x_Client_Session, string if_None_Match, Inkluder2? inkluder, int? kategori)
        {
            return Vegobjekttyper2Async(vegobjekttypeid, x_Client, x_Client_Session, if_None_Match, inkluder, kategori, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">Angir hvilke informasjonsfelter som skal inkluderes i tillegg til vegobjekttypenes metadata.</param>
        /// <param name="kategori">Begrens vegobjekttyper etter kategori. (/vegobjekttyper/kategorier)</param>
        /// <returns>Versjoner av objektet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vegobjekttype>> Vegobjekttyper2Async(int vegobjekttypeid, string x_Client, string x_Client_Session, string if_None_Match, Inkluder2? inkluder, int? kategori, System.Threading.CancellationToken cancellationToken)
        {
            if (vegobjekttypeid == null)
                throw new System.ArgumentNullException("vegobjekttypeid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper/{vegobjekttypeid}?");
            urlBuilder_.Replace("{vegobjekttypeid}", System.Uri.EscapeDataString(ConvertToString(vegobjekttypeid, System.Globalization.CultureInfo.InvariantCulture)));
            if (inkluder != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inkluder, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kategori != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kategori") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kategori, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Vegobjekttype>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Enheter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> EnheterAsync(string x_Client, string x_Client_Session, string if_None_Match)
        {
            return EnheterAsync(x_Client, x_Client_Session, if_None_Match, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Enheter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> EnheterAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper/enheter");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous7>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Datatyper</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> DatatyperAsync(string x_Client, string x_Client_Session, string if_None_Match)
        {
            return DatatyperAsync(x_Client, x_Client_Session, if_None_Match, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Datatyper</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> DatatyperAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper/datatyper");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous8>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Vegobjekttype-kategorier</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> KategorierAsync(string x_Client, string x_Client_Session, string if_None_Match)
        {
            return KategorierAsync(x_Client, x_Client_Session, if_None_Match, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Vegobjekttype-kategorier</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> KategorierAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper/kategorier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous9>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Versjon av datakatalogen</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> VersjonAsync(string x_Client, string x_Client_Session)
        {
            return VersjonAsync(x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Versjon av datakatalogen</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> VersjonAsync(string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper/versjon");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Egenskapstypekategorier</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> EgenskapstypekategorierAsync(string x_Client, string x_Client_Session, string if_None_Match)
        {
            return EgenskapstypekategorierAsync(x_Client, x_Client_Session, if_None_Match, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <returns>Egenskapstypekategorier</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> EgenskapstypekategorierAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegobjekttyper/egenskapstypekategorier");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous10>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Liste over vegnettsresursser</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> VegnettAsync(string x_Client, string x_Client_Session)
        {
            return VegnettAsync(x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Liste over vegnettsresursser</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> VegnettAsync(string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous11>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="ider">Filtrer på objekter med id. Kommaseparert</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="topologinivå">Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.</param>
        /// <param name="superid">Hent detaljerte veglenkesekvenser stedfestet på veglenkesekvens med denne id</param>
        /// <param name="antall">Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.</param>
        /// <param name="start">Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.</param>
        /// <returns>Side med veglenkesekvenser</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VeglenkesekvensListeRespons> VeglenkesekvenserAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<long> ider, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, string kartutsnitt, string polygon, Topologinivå? topologinivå, long? superid, int? antall, string start)
        {
            return VeglenkesekvenserAsync(x_Client, x_Client_Session, ider, fylke, kommune, kontraktsomrade, riksvegrute, gate, vegsystemreferanse, kartutsnitt, polygon, topologinivå, superid, antall, start, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="ider">Filtrer på objekter med id. Kommaseparert</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="topologinivå">Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.</param>
        /// <param name="superid">Hent detaljerte veglenkesekvenser stedfestet på veglenkesekvens med denne id</param>
        /// <param name="antall">Angir hvor mange objekter som skal returneres. Øvre grense er avhengig av størrelse på respons, og vil kunne variere fra endepunkt til endepunkt. Dersom det angis en verdi for antall som overskrider maksimum, vil maksimumsverdi benyttes. Se også `sidestørrelse` i responsens `metadata`-objekt.</param>
        /// <param name="start">Angir markør for neste side objekter som skal returneres. Denne får man i metadata-feltet i responsen.</param>
        /// <returns>Side med veglenkesekvenser</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VeglenkesekvensListeRespons> VeglenkesekvenserAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<long> ider, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, string kartutsnitt, string polygon, Topologinivå? topologinivå, long? superid, int? antall, string start, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett/veglenkesekvenser?");
            if (ider != null)
            {
                foreach (var item_ in ider) { urlBuilder_.Append(System.Uri.EscapeDataString("ider") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (topologinivå != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("topologinivå") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topologinivå, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (superid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("superid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(superid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (antall != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("antall") + "=").Append(System.Uri.EscapeDataString(ConvertToString(antall, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VeglenkesekvensListeRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>En veglenkesekvens</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Veglenkesekvens> Veglenkesekvenser2Async(string x_Client, string x_Client_Session, long veglenkesekvensid, Srid? srid)
        {
            return Veglenkesekvenser2Async(x_Client, x_Client_Session, veglenkesekvensid, srid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>En veglenkesekvens</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Veglenkesekvens> Veglenkesekvenser2Async(string x_Client, string x_Client_Session, long veglenkesekvensid, Srid? srid, System.Threading.CancellationToken cancellationToken)
        {
            if (veglenkesekvensid == null)
                throw new System.ArgumentNullException("veglenkesekvensid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett/veglenkesekvenser/{veglenkesekvensid}?");
            urlBuilder_.Replace("{veglenkesekvensid}", System.Uri.EscapeDataString(ConvertToString(veglenkesekvensid, System.Globalization.CultureInfo.InvariantCulture)));
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Veglenkesekvens>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="ider">Filtrer på objekter med id. Kommaseparert</param>
        /// <param name="topologinivå">Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.</param>
        /// <param name="superid">Hent alle noder med tilkobling til veglenker som har veglenke med oppgitt id som "forelder" i overordnet topologinivå.</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <returns>Side med Vegnoder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VegnoderListeRespons> NoderAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<long> ider, Topologinivå? topologinivå, long? superid, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt)
        {
            return NoderAsync(x_Client, x_Client_Session, ider, topologinivå, superid, fylke, kommune, kontraktsomrade, riksvegrute, gate, vegsystemreferanse, kartutsnitt, polygon, tidspunkt, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="ider">Filtrer på objekter med id. Kommaseparert</param>
        /// <param name="topologinivå">Hent kun elementer på det gitte topologinivået. - Dersom en veglenke har nivå vegtrasé er ofte feltet for topologinivå ikke tilstede. Man vil da få alle veglenker som ikke har verdi kjørefelt eller kjørebane.</param>
        /// <param name="superid">Hent alle noder med tilkobling til veglenker som har veglenke med oppgitt id som "forelder" i overordnet topologinivå.</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <returns>Side med Vegnoder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VegnoderListeRespons> NoderAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<long> ider, Topologinivå? topologinivå, long? superid, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett/noder?");
            if (ider != null)
            {
                foreach (var item_ in ider) { urlBuilder_.Append(System.Uri.EscapeDataString("ider") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (topologinivå != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("topologinivå") + "=").Append(System.Uri.EscapeDataString(ConvertToString(topologinivå, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (superid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("superid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(superid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VegnoderListeRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>En vegnode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Vegnode> Noder2Async(string x_Client, string x_Client_Session, long nodeid, Srid? srid)
        {
            return Noder2Async(x_Client, x_Client_Session, nodeid, srid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>En vegnode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Vegnode> Noder2Async(string x_Client, string x_Client_Session, long nodeid, Srid? srid, System.Threading.CancellationToken cancellationToken)
        {
            if (nodeid == null)
                throw new System.ArgumentNullException("nodeid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett/noder/{nodeid}?");
            urlBuilder_.Replace("{nodeid}", System.Uri.EscapeDataString(ConvertToString(nodeid, System.Globalization.CultureInfo.InvariantCulture)));
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Vegnode>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="historisk">Ved `true` returneres også segmenter med sluttdato</param>
        /// <param name="arm">Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»</param>
        /// <param name="kryssystem">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem</param>
        /// <param name="sideanlegg">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg</param>
        /// <param name="detaljniva">Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="adskiltelop">Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»</param>
        /// <param name="veglenketype">Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <returns>Veglenkesekvens-segmenter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VeglenkesegmentListeRespons> SegmentertAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, bool? historisk, bool? arm, bool? kryssystem, bool? sideanlegg, Detaljniva2? detaljniva, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, Adskiltelop? adskiltelop, System.Collections.Generic.IEnumerable<Anonymous2> veglenketype, Trafikantgruppe? trafikantgruppe, Geometritoleranse? geometritoleranse)
        {
            return SegmentertAsync(x_Client, x_Client_Session, vegsystemreferanse, fylke, kommune, kontraktsomrade, riksvegrute, gate, kartutsnitt, polygon, tidspunkt, historisk, arm, kryssystem, sideanlegg, detaljniva, typeveg, adskiltelop, veglenketype, trafikantgruppe, geometritoleranse, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="fylke">Filtrer på fylke. Kommaseparert liste. Se /omrader/fylker for mulige verdier.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="kontraktsomrade">Filtrer på kontraktsomrade. Kommaseparert liste. Se /omrader/kontraktsomrader for mulige verdier.</param>
        /// <param name="riksvegrute">Filtrer på riksvegrute. Kommaseparert liste. Se /omrader/riksvegruter for mulige verdier.</param>
        /// <param name="gate">Filtrer på gate. Kommaseparert liste. Se /omrader/gater for mulige verdier.</param>
        /// <param name="kartutsnitt">Filtrer vegobjekter med kartutsnitt i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="polygon">Filtrer vegobjekter med polygon i det gjeldende geografiske referansesystemet (`srid`-paramteret)</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="historisk">Ved `true` returneres også segmenter med sluttdato</param>
        /// <param name="arm">Filtrer vegobjekter på om de er stedfestet på Strekning med verdi satt for «arm»</param>
        /// <param name="kryssystem">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Kryssystem</param>
        /// <param name="sideanlegg">Filtrer vegobjekter på om de er stedfestet samme hvor det er et Sideanlegg</param>
        /// <param name="detaljniva">Filtrer vegobjekter på detaljnivå på vegnettet objektet er stedfestet på (kortnavn fra datakatalogen).</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="adskiltelop">Filtrer vegobjekter på om de er stedfestet hvor det er Strekning med verdi satt for «adskilte løp»</param>
        /// <param name="veglenketype">Filtrer vegobjekter på veglenketype på vegnettet objektet er stedfestet. Kommaseparert liste.</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="geometritoleranse">Angir om det skal returneres en forenklet geometri. Dersom parameteren utelates, returneres full geometri for vegobjektene. Nummeret angir distansetoleranse for generering av forenklet geometri.</param>
        /// <returns>Veglenkesekvens-segmenter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VeglenkesegmentListeRespons> SegmentertAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, System.Collections.Generic.IEnumerable<int> fylke, System.Collections.Generic.IEnumerable<int> kommune, System.Collections.Generic.IEnumerable<string> kontraktsomrade, System.Collections.Generic.IEnumerable<string> riksvegrute, System.Collections.Generic.IEnumerable<string> gate, string kartutsnitt, string polygon, System.DateTimeOffset? tidspunkt, bool? historisk, bool? arm, bool? kryssystem, bool? sideanlegg, Detaljniva2? detaljniva, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, Adskiltelop? adskiltelop, System.Collections.Generic.IEnumerable<Anonymous2> veglenketype, Trafikantgruppe? trafikantgruppe, Geometritoleranse? geometritoleranse, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett/veglenkesekvenser/segmentert?");
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fylke != null)
            {
                foreach (var item_ in fylke) { urlBuilder_.Append(System.Uri.EscapeDataString("fylke") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kontraktsomrade != null)
            {
                foreach (var item_ in kontraktsomrade) { urlBuilder_.Append(System.Uri.EscapeDataString("kontraktsomrade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (riksvegrute != null)
            {
                foreach (var item_ in riksvegrute) { urlBuilder_.Append(System.Uri.EscapeDataString("riksvegrute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (gate != null)
            {
                foreach (var item_ in gate) { urlBuilder_.Append(System.Uri.EscapeDataString("gate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (kartutsnitt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kartutsnitt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kartutsnitt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (polygon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("polygon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(polygon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (historisk != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("historisk") + "=").Append(System.Uri.EscapeDataString(ConvertToString(historisk, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kryssystem != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kryssystem") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kryssystem, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sideanlegg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sideanlegg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sideanlegg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detaljniva != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detaljniva") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detaljniva, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (typeveg != null)
            {
                foreach (var item_ in typeveg) { urlBuilder_.Append(System.Uri.EscapeDataString("typeveg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (adskiltelop != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adskiltelop") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adskiltelop, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veglenketype != null)
            {
                foreach (var item_ in veglenketype) { urlBuilder_.Append(System.Uri.EscapeDataString("veglenketype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (trafikantgruppe != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trafikantgruppe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trafikantgruppe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geometritoleranse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geometritoleranse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geometritoleranse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VeglenkesegmentListeRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="historisk">Ved `true` returneres også segmenter med sluttdato</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Segmenter for veglenkesekvens</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Veglenkesegment>> SegmentertAllAsync(string x_Client, string x_Client_Session, long veglenkesekvensid, bool? historisk, Srid? srid)
        {
            return SegmentertAllAsync(x_Client, x_Client_Session, veglenkesekvensid, historisk, srid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="historisk">Ved `true` returneres også segmenter med sluttdato</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Segmenter for veglenkesekvens</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Veglenkesegment>> SegmentertAllAsync(string x_Client, string x_Client_Session, long veglenkesekvensid, bool? historisk, Srid? srid, System.Threading.CancellationToken cancellationToken)
        {
            if (veglenkesekvensid == null)
                throw new System.ArgumentNullException("veglenkesekvensid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vegnett/veglenkesekvenser/segmentert/{veglenkesekvensid}?");
            urlBuilder_.Replace("{veglenkesekvensid}", System.Uri.EscapeDataString(ConvertToString(veglenkesekvensid, System.Globalization.CultureInfo.InvariantCulture)));
            if (historisk != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("historisk") + "=").Append(System.Uri.EscapeDataString(ConvertToString(historisk, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Veglenkesegment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Liste med områdetype</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> OmraderAsync(string x_Client, string x_Client_Session)
        {
            return OmraderAsync(x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Liste med områdetype</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> OmraderAsync(string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/omrader");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous12>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med fylker</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Fylke>> FylkerAsync(string x_Client, string x_Client_Session, string if_None_Match, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous4> inkluder)
        {
            return FylkerAsync(x_Client, x_Client_Session, if_None_Match, srid, inkluder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med fylker</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Fylke>> FylkerAsync(string x_Client, string x_Client_Session, string if_None_Match, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous4> inkluder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/omrader/fylker?");
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Fylke>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med kommuner</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Kommune>> KommunerAsync(string x_Client, string x_Client_Session, string if_None_Match, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous4> inkluder)
        {
            return KommunerAsync(x_Client, x_Client_Session, if_None_Match, srid, inkluder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med kommuner</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Kommune>> KommunerAsync(string x_Client, string x_Client_Session, string if_None_Match, Srid? srid, System.Collections.Generic.IEnumerable<Anonymous4> inkluder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/omrader/kommuner?");
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Kommune>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med riksvegruter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Riksvegrute_rev1>> RiksvegruterAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Collections.Generic.IEnumerable<Anonymous5> inkluder)
        {
            return RiksvegruterAsync(x_Client, x_Client_Session, if_None_Match, inkluder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med riksvegruter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Riksvegrute_rev1>> RiksvegruterAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Collections.Generic.IEnumerable<Anonymous5> inkluder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/omrader/riksvegruter?");
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Riksvegrute_rev1>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Etag matchet, forrige respons kan gjenbrukes.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med kontraktsområder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Kontraktsomrade_rev1>> KontraktsomraderAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Collections.Generic.IEnumerable<Anonymous5> inkluder)
        {
            return KontraktsomraderAsync(x_Client, x_Client_Session, if_None_Match, inkluder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med kontraktsområder</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Kontraktsomrade_rev1>> KontraktsomraderAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Collections.Generic.IEnumerable<Anonymous5> inkluder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/omrader/kontraktsomrader?");
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Kontraktsomrade_rev1>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med gater</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> GaterAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Collections.Generic.IEnumerable<Anonymous5> inkluder)
        {
            return GaterAsync(x_Client, x_Client_Session, if_None_Match, inkluder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="if_None_Match">Dersom header matcher gjeldende E-tag vil 304 returneres</param>
        /// <param name="inkluder">kommaseparert liste over hvilke informasjonselementer som skal returneres i tillegg til vegobjektenes id.</param>
        /// <returns>Liste med gater</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> GaterAsync(string x_Client, string x_Client_Session, string if_None_Match, System.Collections.Generic.IEnumerable<Anonymous5> inkluder, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/omrader/gater?");
            if (inkluder != null)
            {
                foreach (var item_ in inkluder) { urlBuilder_.Append(System.Uri.EscapeDataString("inkluder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));

                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("If-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="nord">Nordlig koordinat</param>
        /// <param name="ost">Østlig koordinat</param>
        /// <param name="lat">Breddegrad</param>
        /// <param name="lon">Lengdegrad</param>
        /// <param name="maks_avstand">Angir søkeavstand i meter</param>
        /// <param name="maks_antall">Angir hvor mange resultater som maksimum skal returneres</param>
        /// <param name="konnekteringslenker">Angir om det skal returneres treff på konnekteringslenker</param>
        /// <param name="detaljerte_lenker">Angir om det skal returneres treff på detaljerte vegnettsnivå</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Posisjonsresultat>> PosisjonAsync(string x_Client, string x_Client_Session, double? nord, double? ost, double? lat, double? lon, int? maks_avstand, int? maks_antall, bool? konnekteringslenker, bool? detaljerte_lenker, System.DateTimeOffset? tidspunkt, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, Srid? srid)
        {
            return PosisjonAsync(x_Client, x_Client_Session, nord, ost, lat, lon, maks_avstand, maks_antall, konnekteringslenker, detaljerte_lenker, tidspunkt, vegsystemreferanse, srid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="nord">Nordlig koordinat</param>
        /// <param name="ost">Østlig koordinat</param>
        /// <param name="lat">Breddegrad</param>
        /// <param name="lon">Lengdegrad</param>
        /// <param name="maks_avstand">Angir søkeavstand i meter</param>
        /// <param name="maks_antall">Angir hvor mange resultater som maksimum skal returneres</param>
        /// <param name="konnekteringslenker">Angir om det skal returneres treff på konnekteringslenker</param>
        /// <param name="detaljerte_lenker">Angir om det skal returneres treff på detaljerte vegnettsnivå</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Posisjonsresultat>> PosisjonAsync(string x_Client, string x_Client_Session, double? nord, double? ost, double? lat, double? lon, int? maks_avstand, int? maks_antall, bool? konnekteringslenker, bool? detaljerte_lenker, System.DateTimeOffset? tidspunkt, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, Srid? srid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/posisjon?");
            if (nord != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nord") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nord, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ost != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ost") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ost, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lon != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lon") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maks_avstand != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maks_avstand") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maks_avstand, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maks_antall != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maks_antall") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maks_antall, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (konnekteringslenker != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("konnekteringslenker") + "=").Append(System.Uri.EscapeDataString(ConvertToString(konnekteringslenker, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detaljerte_lenker != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detaljerte_lenker") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detaljerte_lenker, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Posisjonsresultat>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html)</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `posisjon@veglenkesekvensid`</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Posisjonsresultat> VegAsync(string vegsystemreferanse, string veglenkesekvens, System.DateTimeOffset? tidspunkt, Srid? srid, System.Collections.Generic.IEnumerable<int> kommune)
        {
            return VegAsync(vegsystemreferanse, veglenkesekvens, tidspunkt, srid, kommune, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://api.vegdata.no/v3/vegsystemreferanse.html)</param>
        /// <param name="veglenkesekvens">Filtrer vegobjekter på stedfesting på vegnettet. Format: `posisjon@veglenkesekvensid`</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Posisjonsresultat> VegAsync(string vegsystemreferanse, string veglenkesekvens, System.DateTimeOffset? tidspunkt, Srid? srid, System.Collections.Generic.IEnumerable<int> kommune, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/veg?");
            if (vegsystemreferanse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vegsystemreferanse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veglenkesekvens != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veglenkesekvens") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veglenkesekvens, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Posisjonsresultat>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Posisjonsresultat>> BatchAsync(string vegsystemreferanser, string veglenkesekvenser, System.Collections.Generic.IEnumerable<int> kommune, Srid? srid)
        {
            return BatchAsync(vegsystemreferanser, veglenkesekvenser, kommune, srid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="kommune">Filtrer på kommune. Kommaseparert liste. Se /omrader/kommuner for mulige verdier.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Posisjonsresultat>> BatchAsync(string vegsystemreferanser, string veglenkesekvenser, System.Collections.Generic.IEnumerable<int> kommune, Srid? srid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/veg/batch?");
            if (vegsystemreferanser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vegsystemreferanser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veglenkesekvenser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veglenkesekvenser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veglenkesekvenser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kommune != null)
            {
                foreach (var item_ in kommune) { urlBuilder_.Append(System.Uri.EscapeDataString("kommune") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, Posisjonsresultat>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="ider">Filtrer på objekter med id. Kommaseparert</param>
        /// <param name="fra">Inkluder transaksjoner fra og med dette tidspunktet</param>
        /// <param name="til">Inkluder transaksjoner til og med dette tidspunktet</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TransaksjonListeRespons> TransaksjonerAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<long> ider, string fra, string til)
        {
            return TransaksjonerAsync(x_Client, x_Client_Session, ider, fra, til, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="ider">Filtrer på objekter med id. Kommaseparert</param>
        /// <param name="fra">Inkluder transaksjoner fra og med dette tidspunktet</param>
        /// <param name="til">Inkluder transaksjoner til og med dette tidspunktet</param>
        /// <returns>Posisjoner på vegnettet</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TransaksjonListeRespons> TransaksjonerAsync(string x_Client, string x_Client_Session, System.Collections.Generic.IEnumerable<long> ider, string fra, string til, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/transaksjoner?");
            if (ider != null)
            {
                foreach (var item_ in ider) { urlBuilder_.Append(System.Uri.EscapeDataString("ider") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fra != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fra") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fra, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (til != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("til") + "=").Append(System.Uri.EscapeDataString(ConvertToString(til, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransaksjonListeRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Nåværende status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> StatusAsync(string x_Client, string x_Client_Session)
        {
            return StatusAsync(x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Nåværende status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> StatusAsync(string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Vellykket innlogging</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Tokens> LoginAsync(Innlogging body, string x_Client, string x_Client_Session)
        {
            return LoginAsync(body, x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Vellykket innlogging</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Tokens> LoginAsync(Innlogging body, string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/login");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tokens>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Vellykket innlogging</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Tokens> RefreshAsync(Body body, string x_Client, string x_Client_Session)
        {
            return RefreshAsync(body, x_Client, x_Client_Session, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <returns>Vellykket innlogging</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Tokens> RefreshAsync(Body body, string x_Client, string x_Client_Session, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/auth/refresh");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tokens>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="start">Startposisjon som et punkt eller posisjon@veglenkesekvens.</param>
        /// <param name="slutt">Sluttposisjon som et punkt eller posisjon@veglenkesekvens</param>
        /// <param name="geometri">Finn sammenhengende vegnett som passer med denne geometrien</param>
        /// <param name="maks_avstand">Maks avstand i meter til veglenker</param>
        /// <param name="omkrets">Konvolutt lagt rund start- og slutt-punkt for å beregne rute</param>
        /// <param name="konnekteringslenker">Inkludere konnekteringslenker</param>
        /// <param name="detaljerte_lenker">Inkludere detaljerte lenker</param>
        /// <param name="kortform">Returner minimal respons</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="behold_trafikantgruppe">Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende). Overstyres av parameteren trafikantgruppe.</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="tidspunkt_start">Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.</param>
        /// <param name="tidspunkt_slutt">Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Sammenhengende vegnett for oppgitte parametre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RuteRespons> RuteGETAsync(string x_Client, string x_Client_Session, string start, string slutt, string geometri, int? maks_avstand, int? omkrets, bool? konnekteringslenker, bool? detaljerte_lenker, bool? kortform, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, Trafikantgruppe? trafikantgruppe, bool? behold_trafikantgruppe, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, System.DateTimeOffset? tidspunkt, System.DateTimeOffset? tidspunkt_start, System.DateTimeOffset? tidspunkt_slutt, Srid? srid)
        {
            return RuteGETAsync(x_Client, x_Client_Session, start, slutt, geometri, maks_avstand, omkrets, konnekteringslenker, detaljerte_lenker, kortform, vegsystemreferanse, trafikantgruppe, behold_trafikantgruppe, typeveg, tidspunkt, tidspunkt_start, tidspunkt_slutt, srid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="start">Startposisjon som et punkt eller posisjon@veglenkesekvens.</param>
        /// <param name="slutt">Sluttposisjon som et punkt eller posisjon@veglenkesekvens</param>
        /// <param name="geometri">Finn sammenhengende vegnett som passer med denne geometrien</param>
        /// <param name="maks_avstand">Maks avstand i meter til veglenker</param>
        /// <param name="omkrets">Konvolutt lagt rund start- og slutt-punkt for å beregne rute</param>
        /// <param name="konnekteringslenker">Inkludere konnekteringslenker</param>
        /// <param name="detaljerte_lenker">Inkludere detaljerte lenker</param>
        /// <param name="kortform">Returner minimal respons</param>
        /// <param name="vegsystemreferanse">Filtrer vegobjekter på [vegsystemreferanse](https://nvdbapiles-v3.atlas.vegvesen.no/dokumentasjon/#vegsystemreferanse). Kommaseparert liste.</param>
        /// <param name="trafikantgruppe">Filtrer vegobjekter på trafikantgruppe</param>
        /// <param name="behold_trafikantgruppe">Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende). Overstyres av parameteren trafikantgruppe.</param>
        /// <param name="typeveg">Filtrer vegobjekter på type veg på vegnettet objektet er stedfestet på. Kommaseparert liste.</param>
        /// <param name="tidspunkt">Begrense spørring til det gitte tidspunktet</param>
        /// <param name="tidspunkt_start">Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.</param>
        /// <param name="tidspunkt_slutt">Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.</param>
        /// <param name="srid">Angir hvilket geografisk referansesystem geometrien skal returneres i. 
        /// <br/> Mer informasjon: [EPSG:5973](https://epsg.io/5973) [EPSG:4326](http://epsg.io/4326)</param>
        /// <returns>Sammenhengende vegnett for oppgitte parametre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RuteRespons> RuteGETAsync(string x_Client, string x_Client_Session, string start, string slutt, string geometri, int? maks_avstand, int? omkrets, bool? konnekteringslenker, bool? detaljerte_lenker, bool? kortform, System.Collections.Generic.IEnumerable<string> vegsystemreferanse, Trafikantgruppe? trafikantgruppe, bool? behold_trafikantgruppe, System.Collections.Generic.IEnumerable<Anonymous3> typeveg, System.DateTimeOffset? tidspunkt, System.DateTimeOffset? tidspunkt_start, System.DateTimeOffset? tidspunkt_slutt, Srid? srid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/beta/vegnett/rute?");
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (slutt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("slutt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(slutt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geometri != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("geometri") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geometri, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maks_avstand != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maks_avstand") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maks_avstand, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (omkrets != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("omkrets") + "=").Append(System.Uri.EscapeDataString(ConvertToString(omkrets, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (konnekteringslenker != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("konnekteringslenker") + "=").Append(System.Uri.EscapeDataString(ConvertToString(konnekteringslenker, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detaljerte_lenker != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detaljerte_lenker") + "=").Append(System.Uri.EscapeDataString(ConvertToString(detaljerte_lenker, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kortform != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kortform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kortform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vegsystemreferanse != null)
            {
                foreach (var item_ in vegsystemreferanse) { urlBuilder_.Append(System.Uri.EscapeDataString("vegsystemreferanse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (trafikantgruppe != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trafikantgruppe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trafikantgruppe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (behold_trafikantgruppe != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("behold_trafikantgruppe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(behold_trafikantgruppe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (typeveg != null)
            {
                foreach (var item_ in typeveg) { urlBuilder_.Append(System.Uri.EscapeDataString("typeveg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tidspunkt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt") + "=").Append(System.Uri.EscapeDataString(tidspunkt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt_start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt_start") + "=").Append(System.Uri.EscapeDataString(tidspunkt_start.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tidspunkt_slutt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tidspunkt_slutt") + "=").Append(System.Uri.EscapeDataString(tidspunkt_slutt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (srid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("srid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(srid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuteRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="body">Ruteforespørsel definert som JSON.</param>
        /// <returns>Sammenhengende vegnett for oppgitte parametre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RuteRespons> RutePOSTAsync(string x_Client, string x_Client_Session, RouteRequest body)
        {
            return RutePOSTAsync(x_Client, x_Client_Session, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Client">Noe som identifiserer klienten eller fagsystemet. Eksempler: «Vegkart», «NVDB Skrive-API». Må settes dersom User-Agent ikke er satt. X-Client foretrekkes.</param>
        /// <param name="x_Client_Session">Settes for å identifisere en samling med requester, for eksempel en brukersesjon. (bruk i såfall en uuid eller noe lignende, ikke brukernavn eller epost)</param>
        /// <param name="body">Ruteforespørsel definert som JSON.</param>
        /// <returns>Sammenhengende vegnett for oppgitte parametre</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RuteRespons> RutePOSTAsync(string x_Client, string x_Client_Session, RouteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/beta/vegnett/rute");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Client == null)
                        throw new System.ArgumentNullException("x_Client");
                    request_.Headers.TryAddWithoutValidation("X-Client", ConvertToString(x_Client, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_Client_Session != null)
                        request_.Headers.TryAddWithoutValidation("X-Client-Session", ConvertToString(x_Client_Session, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/vnd.vegvesen.nvdb-v3-rev1+json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuteRespons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjekttypeReferanse
    {
        /// <summary>
        /// ID for vegobjekttype
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Navn for vegobjekttype
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjekttypeStatistikk : VegobjekttypeReferanse
    {
        [Newtonsoft.Json.JsonProperty("statistikk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Statistikk Statistikk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Statistikk
    {
        /// <summary>
        /// Antallet objekter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("antall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Antall { get; set; }

        /// <summary>
        /// Den summerte lengden av objektene
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Versjon, start og sluttdato.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektMetadata
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type Type { get; set; }

        /// <summary>
        /// Versjonsnummer for dette objektet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Versjon { get; set; }

        /// <summary>
        /// Når dette objektet ble gjeldende
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdato { get; set; }

        /// <summary>
        /// Når dette objektet ikke lengre er gjeldende
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sluttdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sluttdato { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegobjekt
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektMetadata Metadata { get; set; }

        /// <summary>
        /// Objektets egenskaper. Tilstede dersom `inkluder=alle|egenskaper`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("egenskaper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Egenskaper> Egenskaper { get; set; }

        /// <summary>
        /// Objektets geometri på vegnettet, eller egengeometri. Tilstede dersom `inkluder=alle|geometri`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometri Geometri { get; set; }

        /// <summary>
        /// Plasseringen av dette objektet. Tilstede dersom `inkluder=alle|lokasjon`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lokasjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Lokasjon Lokasjon { get; set; }

        /// <summary>
        /// Objektets mødre og døtre. Tilstede dersom `inkluder=alle|relasjoner`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relasjoner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relasjoner Relasjoner { get; set; }

        /// <summary>
        /// Segmenter for dette objektet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vegsegmenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegsegmenter> Vegsegmenter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum TypeVeg
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Kanalisert veg")]
        Kanalisert_veg = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Enkel bilveg")]
        Enkel_bilveg = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rampe")]
        Rampe = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Rundkjøring")]
        Rundkjøring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Bilferje")]
        Bilferje = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Passasjerferje")]
        Passasjerferje = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Gang- og sykkelveg")]
        Gang_og_sykkelveg = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sykkelveg")]
        Sykkelveg = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Gangveg")]
        Gangveg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Gågate")]
        Gågate = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Fortau")]
        Fortau = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Trapp")]
        Trapp = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Gangfelt")]
        Gangfelt = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Gatetun")]
        Gatetun = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Traktorveg")]
        Traktorveg = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Sti")]
        Sti = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Annet")]
        Annet = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum TypeVegSosi
    {

        [System.Runtime.Serialization.EnumMember(Value = @"kanalisertVeg")]
        KanalisertVeg = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"enkelBilveg")]
        EnkelBilveg = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rampe")]
        Rampe = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"rundkjøring")]
        Rundkjøring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bilferje")]
        Bilferje = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"passasjerferje")]
        Passasjerferje = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"gangOgSykkelveg")]
        GangOgSykkelveg = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"sykkelveg")]
        Sykkelveg = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"gangveg")]
        Gangveg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"gågate")]
        Gågate = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"fortau")]
        Fortau = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"trapp")]
        Trapp = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"gangfelt")]
        Gangfelt = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"gatetun")]
        Gatetun = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"traktorveg")]
        Traktorveg = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"sti")]
        Sti = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"annet")]
        Annet = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MeterReferanse
    {
        /// <summary>
        /// Meterverdi for punktreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Meter { get; set; }

        /// <summary>
        /// Start-meterverdi for strekningsreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fra_meter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Fra_meter { get; set; }

        /// <summary>
        /// Slutt-meterverdi for strekningsreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("til_meter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Til_meter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Vegsystemreferanse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegsystemreferanse
    {
        [Newtonsoft.Json.JsonProperty("kortform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortform { get; set; }

        /// <summary>
        /// Vegsystem (915)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vegsystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vegsystem Vegsystem { get; set; }

        /// <summary>
        /// Strekning (916)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("strekning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Strekning Strekning { get; set; }

        /// <summary>
        /// Kryssystem (917) og Kryssdel (918)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kryssystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kryssystem Kryssystem { get; set; }

        /// <summary>
        /// Sideanlegg (919) og Sideanleggsdel (920)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sidealegg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sidealegg Sidealegg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Stedfesting på vegnettet
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektLokasjonStedfesting
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Linjestedfesting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektLokasjonStedfestingLinje
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        [Newtonsoft.Json.JsonProperty("startposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Startposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Sluttposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("kortform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortform { get; set; }

        [Newtonsoft.Json.JsonProperty("kjørefelt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kjorefelt Kjørefelt { get; set; }

        [Newtonsoft.Json.JsonProperty("sideposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sideposisjon Sideposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("retning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retning Retning { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Svingstedfesting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektLokasjonStedfestingSving
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Nodeid { get; set; }

        [Newtonsoft.Json.JsonProperty("startpunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektLokasjonStedfesting Startpunkt { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttpunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektLokasjonStedfesting Sluttpunkt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RelasjonBase
    {
        /// <summary>
        /// Id for listeegenskap relasjonen ligger i.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listeid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Listeid { get; set; }

        /// <summary>
        /// Id for egenskapen/relasjonen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Vegobjekttype for relatert objekt
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type2 Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Relasjon med id
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Relasjon : RelasjonBase
    {
        /// <summary>
        /// Id for relaterte objekter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vegobjekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Vegobjekter { get; set; }

    }

    /// <summary>
    /// Relasjon med fullstendige objekter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RelasjonFull : RelasjonBase
    {
        /// <summary>
        /// Relaterte objekter med samme egenskaper som toppobjektene.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vegobjekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegobjekt> Vegobjekter { get; set; }

    }

    /// <summary>
    /// Assosiasjon til et annet vegobjekt
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskap
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Beskriver hvilken type egenskapstypen er
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Egenskapstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Assosiasjon")]
        Assosiasjon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolsk")]
        Boolsk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binær")]
        Binær = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Tekst")]
        Tekst = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Dato")]
        Dato = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Flyttall")]
        Flyttall = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Heltall")]
        Heltall = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Struktur")]
        Struktur = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Geometri")]
        Geometri = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Stedfesting")]
        Stedfesting = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Kortdato")]
        Kortdato = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Tid")]
        Tid = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Liste")]
        Liste = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Tekstenum")]
        Tekstenum = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Heltallenum")]
        Heltallenum = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Flyttallenum")]
        Flyttallenum = 15,

    }

    /// <summary>
    /// Navnet på datatypen i datakatalogen (/vegobjekttyper/datatyper) (datatype er et felt som kanskje blir fjernet. Benytt `egenskapstype` og `geometritype`, `stedfestingstype`)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Datatype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tekst")]
        Tekst = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tall")]
        Tall = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Dato")]
        Dato = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"KortDato")]
        KortDato = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Klokkeslett")]
        Klokkeslett = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GeomPunkt")]
        GeomPunkt = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GeomLinje eller Kurve")]
        GeomLinje_eller_Kurve = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GeomFlate")]
        GeomFlate = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GeomSammensatt geometri")]
        GeomSammensatt_geometri = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GeomMultiPunkt")]
        GeomMultiPunkt = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GeomMultiKurve/linje")]
        GeomMultiKurve_linje = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Struktur")]
        Struktur = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BinærObjekt")]
        BinærObjekt = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Tegn")]
        Tegn = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FlerverdiAttributt, Tekst")]
        FlerverdiAttributt__Tekst = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FlerverdiAttributt, Tall")]
        FlerverdiAttributt__Tall = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Liste")]
        Liste = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Assosiasjon")]
        Assosiasjon = 18,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapBase
    {
        /// <summary>
        /// id for egenskapen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Navnet på egenskapstypen i datakatalogen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("egenskapstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Egenskapstype Egenskapstype { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Datatype Datatype { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Binær blob-egenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapBinar : VegobjektEgenskapBase
    {
        /// <summary>
        /// ID for binær blob
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blob_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Blob_id { get; set; }

        /// <summary>
        /// Blobformat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blob_format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blob_format { get; set; }

        /// <summary>
        /// Fullstendig url for nedlasting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

    }

    /// <summary>
    /// Boolsk egenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapBoolsk : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Verdi { get; set; }

    }

    /// <summary>
    /// Tekstegenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapTekst : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

    }

    /// <summary>
    /// Datoegenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapDato : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Verdi { get; set; }

    }

    /// <summary>
    /// Flyttall-egenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapFlyttall : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Verdi { get; set; }

    }

    /// <summary>
    /// Heltall-egenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapHeltall : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Verdi { get; set; }

    }

    /// <summary>
    /// Egenskap som inneholder forskjellige andre egenskaper
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapStruktur : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("innhold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Egenskaper> Innhold { get; set; }

    }

    /// <summary>
    /// Geometriegenskap
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapGeometri : VegobjektEgenskapBase
    {
        /// <summary>
        /// WKT for egenskapen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("kvalitet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometriKvalitet Kvalitet { get; set; }

        [Newtonsoft.Json.JsonProperty("datafangstdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Datafangstdato { get; set; }

        [Newtonsoft.Json.JsonProperty("verifiseringsdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Verifiseringsdato { get; set; }

        [Newtonsoft.Json.JsonProperty("oppdateringsdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Oppdateringsdato { get; set; }

        [Newtonsoft.Json.JsonProperty("prosesshistorikk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prosesshistorikk { get; set; }

        [Newtonsoft.Json.JsonProperty("kommune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kommune { get; set; }

        /// <summary>
        /// Se vegobjekttype 793, egenskap 9792 Medium
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektEgenskapGeometriMedium Medium { get; set; }

        /// <summary>
        /// Se vegobjekttype 793, egenskap 9792 Medium, slik den er lagret i NVDB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medium_nvdb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektEgenskapGeometriMedium_nvdb Medium_nvdb { get; set; }

        [Newtonsoft.Json.JsonProperty("sosinavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosinavn { get; set; }

        /// <summary>
        /// Se vegobjekttype 793, egenskap 9784 Temakode eller https://www.kartverket.no/standard/sosi/SOSI-koder/SOSI-koder.xls
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temakode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektEgenskapGeometriTemakode Temakode { get; set; }

        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("høydereferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Høydereferanse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GeometriBase
    {
        /// <summary>
        /// WKT for egenskapen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("kvalitet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometriKvalitet Kvalitet { get; set; }

        [Newtonsoft.Json.JsonProperty("datafangstdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Datafangstdato { get; set; }

        [Newtonsoft.Json.JsonProperty("verifiseringsdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Verifiseringsdato { get; set; }

        [Newtonsoft.Json.JsonProperty("oppdateringsdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Oppdateringsdato { get; set; }

        [Newtonsoft.Json.JsonProperty("prosesshistorikk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prosesshistorikk { get; set; }

        [Newtonsoft.Json.JsonProperty("kommune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kommune { get; set; }

        /// <summary>
        /// Se vegobjekttype 793, egenskap 9792 Medium
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektEgenskapGeometriMedium Medium { get; set; }

        /// <summary>
        /// Se vegobjekttype 793, egenskap 9792 Medium, slik den er lagret i NVDB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medium_nvdb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektEgenskapGeometriMedium_nvdb Medium_nvdb { get; set; }

        [Newtonsoft.Json.JsonProperty("sosinavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosinavn { get; set; }

        /// <summary>
        /// Se vegobjekttype 793, egenskap 9784 Temakode eller https://www.kartverket.no/standard/sosi/SOSI-koder/SOSI-koder.xls
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temakode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektEgenskapGeometriTemakode Temakode { get; set; }

        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("høydereferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Høydereferanse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Punktstedfesting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapStedfesting : VegobjektEgenskapStedfestingBase
    {
        [Newtonsoft.Json.JsonProperty("stedfestingstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektEgenskapStedfestingStedfestingstype Stedfestingstype { get; set; }

        /// <summary>
        /// Relativ posisjon på veglenkesekvensen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relativPosisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RelativPosisjon { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapStedfestingBase
    {
        /// <summary>
        /// Id for veglenkesekvens
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        [Newtonsoft.Json.JsonProperty("retning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retning Retning { get; set; }

        [Newtonsoft.Json.JsonProperty("sideposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sideposisjon Sideposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("kjørefelt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kjorefelt Kjørefelt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Se vegobjekttype 793 NVDB Dokumentasjon, egenskap 11431 Feltkode
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kjorefelt : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Om objektet er stedfestet med eller mot lenkeretning
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Retning
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MED")]
        MED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MOT")]
        MOT = 1,

    }

    /// <summary>
    /// Se vegobjekttype 793 NVDB Dokumentasjon, egenskap 8762 Sideposisjon
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Sideposisjon
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"V")]
        V = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"H")]
        H = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"K")]
        K = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MV")]
        MV = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MH")]
        MH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VT")]
        VT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HT")]
        HT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"R0")]
        R0 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 10,

    }

    /// <summary>
    /// Linjestedfesting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapStedfestingLinje : VegobjektEgenskapStedfestingBase
    {
        [Newtonsoft.Json.JsonProperty("stedfestingstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektEgenskapStedfestingLinjeStedfestingstype Stedfestingstype { get; set; }

        [Newtonsoft.Json.JsonProperty("fra_posisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Fra_posisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("til_posisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Til_posisjon { get; set; }

    }

    /// <summary>
    /// Svingerestriksjon
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapStedfestingSving : Anonymous13
    {

    }

    /// <summary>
    /// Kortdato
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapKortdato : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

    }

    /// <summary>
    /// Tid
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapTid : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

    }

    /// <summary>
    /// Liste med egenskaper av samme type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapListe : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("innhold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Egenskaper> Innhold { get; set; }

    }

    /// <summary>
    /// Tekstenum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapTekstenum : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("enum_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enum_id { get; set; }

    }

    /// <summary>
    /// Helstallsenum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapHelltallenum : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("enum_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enum_id { get; set; }

    }

    /// <summary>
    /// Flyttallsenum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektEgenskapFlyttallenum : VegobjektEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("enum_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enum_id { get; set; }

    }

    /// <summary>
    /// Se vegobjekttype 793 NVDB dokumentasjon, egenskap 9953 Kvalitet, geometri eller [SOSI-standard kapittel 1.6.2.8](https://kartverket.no/globalassets/standard/sosi-standarden-del-1-og-2/sosi-standard-del-1/generelle-typer-4.5.pdf)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class GeometriKvalitet
    {
        /// <summary>
        /// Se vegobjekttype 793 NVDB Dokumentasjon, egenskap 9543 Målemetode eller Kodeliste i kapitel 1.6.2.8.2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("målemetode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeometriKvalitetMålemetode Målemetode { get; set; }

        /// <summary>
        /// Punktstandardavviket i grunnriss for punkter samt tverravvik for linjer, i cm. Se underegenskap 9551 Nøyaktighet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nøyaktighet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nøyaktighet { get; set; }

        /// <summary>
        /// Hvor godt den kartlagte detalj var synbar ved kartleggingen. Kodeliste i kapitel 1.6.2.8.4. Se underegenskap 9545 Synbarhet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("synbarhet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeometriKvalitetSynbarhet Synbarhet { get; set; }

        /// <summary>
        /// Metode for å måle objekttypens høydeverdi. Kodeliste i kapitel 1.6.2.8.3. Se underegenskap 9544 H-målemetode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("målemetodeHøyde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeometriKvalitetMålemetodeHøyde MålemetodeHøyde { get; set; }

        /// <summary>
        /// Nøyaktighet for høyden i cm. Se underegenskap 9552 H-nøyaktighet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nøyaktighetHøyde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NøyaktighetHøyde { get; set; }

        /// <summary>
        /// Absolutt toleranse for geometriske avvik. Se underegenskap 9783 Toleranse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toleranse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Toleranse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PagineringMetadata
    {
        /// <summary>
        /// Totalt antall treff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("antall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Antall { get; set; }

        /// <summary>
        /// Antallet objekter som ble returnert i denne responsen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Returnert { get; set; }

        /// <summary>
        /// Maks antall objekter som blir returnert per side
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sidestørrelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sidestørrelse { get; set; }

        /// <summary>
        /// Metadata om neste side. Vil alltid ha verdi, når resultatsettet er tomt vil neste side være tom og samme `start` token vil returneres for påfølgende side.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("neste", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Neste Neste { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektListeRespons
    {
        [Newtonsoft.Json.JsonProperty("objekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegobjekt> Objekter { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagineringMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransaksjonListeRespons
    {
        [Newtonsoft.Json.JsonProperty("objekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaksjon> Objekter { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagineringMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Assosiasjon
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjekttypeEgenskap
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapBase
    {
        /// <summary>
        /// Angir egenskapstypens unike id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Kategorien til denne egenskapstypen. Se endepunkt /vegobjekttyper/egenskapstypekategorier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kategori", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kategori { get; set; }

        /// <summary>
        /// Angir egenskapstypens offisielle navn.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        /// <summary>
        /// Et forkortet navn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        /// <summary>
        /// Tekstlig beskrivelse av egenskapstypen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        [Newtonsoft.Json.JsonProperty("egenskapstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Egenskapstype Egenskapstype { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Datatype Datatype { get; set; }

        /// <summary>
        /// Navn som brukes i dataleveranser
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sosinvdbnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosinvdbnavn { get; set; }

        /// <summary>
        /// Navn på tilsvarende objekttype i SOSI-standarden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sosinavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosinavn { get; set; }

        /// <summary>
        /// Sorteringsnummer for egenskapstypen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sorteringsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sorteringsnummer { get; set; }

        /// <summary>
        /// Angir om egenskapstypen har verdier av sensitiv art. Dersom verdi er 0 er egenskapen ikke sensitiv.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sensitivitet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektTypeEgenskapBaseSensitivitet Sensitivitet { get; set; }

        /// <summary>
        /// Angir om det er krav til regisrering av egenskapstypen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viktighet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapBaseViktighet Viktighet { get; set; }

        [Newtonsoft.Json.JsonProperty("ledetekst", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ledetekst { get; set; }

        [Newtonsoft.Json.JsonProperty("skrivebeskyttet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skrivebeskyttet { get; set; }

        [Newtonsoft.Json.JsonProperty("komplementær_egenskapstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Komplementær_egenskapstype { get; set; }

        [Newtonsoft.Json.JsonProperty("grunnrissreferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grunnrissreferanse { get; set; }

        [Newtonsoft.Json.JsonProperty("nøyaktighetskrav_grunnriss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Nøyaktighetskrav_grunnriss { get; set; }

        [Newtonsoft.Json.JsonProperty("høydereferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Høydereferanse { get; set; }

        [Newtonsoft.Json.JsonProperty("høydereferanse_tall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Høydereferanse_tall { get; set; }

        [Newtonsoft.Json.JsonProperty("nøyaktighetskrav_høyde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Nøyaktighetskrav_høyde { get; set; }

        [Newtonsoft.Json.JsonProperty("referansegeometri_tilstrekkelig", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Referansegeometri_tilstrekkelig { get; set; }

        [Newtonsoft.Json.JsonProperty("sosi_referanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosi_referanse { get; set; }

        [Newtonsoft.Json.JsonProperty("avledet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Avledet { get; set; }

        [Newtonsoft.Json.JsonProperty("obligatorisk_verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Obligatorisk_verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("gruppesorteringsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Gruppesorteringsnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("tilleggskrav", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tilleggskrav { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Enhet
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapPrimitiv : VegobjektTypeEgenskapBase
    {
        /// <summary>
        /// Dato for når egenskapstypen ble en del av objektlista. Om feltet ikke har noen verdi, er ikke egenskapstypen en del av objektlista.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objektliste_dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Objektliste_dato { get; set; }

        [Newtonsoft.Json.JsonProperty("slutt_dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Slutt_dato { get; set; }

        [Newtonsoft.Json.JsonProperty("lengdeavhengig_verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Lengdeavhengig_verdi { get; set; }

        [Newtonsoft.Json.JsonProperty("ajourhold_snu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ajourhold_snu { get; set; }

    }

    /// <summary>
    /// Binær
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapBinar : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("mediatype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mediatype { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Boolsk
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapBoolsk : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Standardverdi { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tekst
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapTekst : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("feltlengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Feltlengde { get; set; }

        [Newtonsoft.Json.JsonProperty("feltmønster", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Feltmønster { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Dato
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapDato : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("min_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Min_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("maks_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Maks_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("feltmønster", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Feltmønster { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Flyttall
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapFlyttall : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("min_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Min_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("maks_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Maks_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Min { get; set; }

        [Newtonsoft.Json.JsonProperty("maks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Maks { get; set; }

        [Newtonsoft.Json.JsonProperty("desimaler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Desimaler { get; set; }

        [Newtonsoft.Json.JsonProperty("feltlengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Feltlengde { get; set; }

        [Newtonsoft.Json.JsonProperty("fortegnsendring_snu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Fortegnsendring_snu { get; set; }

        [Newtonsoft.Json.JsonProperty("enhet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Enhet Enhet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Heltall
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapHeltall : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("min_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Min_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("maks_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Maks_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Min { get; set; }

        [Newtonsoft.Json.JsonProperty("maks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Maks { get; set; }

        [Newtonsoft.Json.JsonProperty("desimaler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Desimaler { get; set; }

        [Newtonsoft.Json.JsonProperty("feltlengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Feltlengde { get; set; }

        [Newtonsoft.Json.JsonProperty("fortegnsendring_snu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Fortegnsendring_snu { get; set; }

        [Newtonsoft.Json.JsonProperty("enhet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Enhet Enhet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Struktur
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapStruktur : VegobjektTypeEgenskapBase
    {
        /// <summary>
        /// Egenskapstyper som kan inngå i strukturen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("egenskaper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Egenskapstype> Egenskaper { get; set; }

    }

    /// <summary>
    /// Geometri
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapGeometri : VegobjektTypeEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("dimensjoner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Dimensjoner { get; set; }

        [Newtonsoft.Json.JsonProperty("geometritype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapGeometriGeometritype Geometritype { get; set; }

        [Newtonsoft.Json.JsonProperty("innenfor_mor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Innenfor_mor { get; set; }

    }

    /// <summary>
    /// Stedfesting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapStedfesting : VegobjektTypeEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("stedfestingstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapStedfestingStedfestingstype Stedfestingstype { get; set; }

        [Newtonsoft.Json.JsonProperty("geometritype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapStedfestingGeometritype Geometritype { get; set; }

        [Newtonsoft.Json.JsonProperty("overlapp_ok", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Overlapp_ok { get; set; }

        [Newtonsoft.Json.JsonProperty("kjørefelt_relevant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapStedfestingKjørefelt_relevant Kjørefelt_relevant { get; set; }

        [Newtonsoft.Json.JsonProperty("sideposisjon_relevant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapStedfestingSideposisjon_relevant Sideposisjon_relevant { get; set; }

        [Newtonsoft.Json.JsonProperty("innenfor_mor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Innenfor_mor { get; set; }

        [Newtonsoft.Json.JsonProperty("vegnettsajourhold_splitt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjektTypeEgenskapStedfestingVegnettsajourhold_splitt Vegnettsajourhold_splitt { get; set; }

        [Newtonsoft.Json.JsonProperty("overlappsautomatikk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Overlappsautomatikk { get; set; }

        [Newtonsoft.Json.JsonProperty("retning_relevant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Retning_relevant { get; set; }

    }

    /// <summary>
    /// Kortdato
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapKortdato : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("min_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public int Min_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("maks_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Maks_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("feltmønster", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Feltmønster { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tid
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapTid : VegobjektTypeEgenskapPrimitiv
    {
        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("min_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Min_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("maks_anbefalt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maks_anbefalt { get; set; }

        [Newtonsoft.Json.JsonProperty("feltmønster", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Feltmønster { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Liste
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapListe : VegobjektTypeEgenskapBase
    {
        [Newtonsoft.Json.JsonProperty("maksimalt_antall_verdier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Maksimalt_antall_verdier { get; set; }

        [Newtonsoft.Json.JsonProperty("minimalt_antall_verdier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Minimalt_antall_verdier { get; set; }

        [Newtonsoft.Json.JsonProperty("innhold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Innhold Innhold { get; set; }

    }

    /// <summary>
    /// Tekstenum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapTekstenum : VegobjektTypeEgenskapTekst
    {
        [Newtonsoft.Json.JsonProperty("tillate_verdier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Enum_verdi_tekst> Tillate_verdier { get; set; }

    }

    /// <summary>
    /// Helstallsenum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapHelltallenum : VegobjektTypeEgenskapHeltall
    {
        [Newtonsoft.Json.JsonProperty("tillate_verdier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Enum_verdi_heltall> Tillate_verdier { get; set; }

    }

    /// <summary>
    /// Flyttallsenum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjektTypeEgenskapFlyttallenum : VegobjektTypeEgenskapFlyttall
    {
        [Newtonsoft.Json.JsonProperty("tillate_verdier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Enum_verdi_flyttall> Tillate_verdier { get; set; }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("Tekst", typeof(Enum_verdi_tekst))]
    [JsonInheritanceAttribute("Heltall", typeof(Enum_verdi_heltall))]
    [JsonInheritanceAttribute("Flyttall", typeof(Enum_verdi_flyttall))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Enum_verdi_base
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavnlengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kortnavnlengde { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn_brukbar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Kortnavn_brukbar { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        [Newtonsoft.Json.JsonProperty("sorteringsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sorteringsnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("objektliste_dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Objektliste_dato { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sluttdato { get; set; }

        [Newtonsoft.Json.JsonProperty("standardverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Standardverdi { get; set; }

        [Newtonsoft.Json.JsonProperty("komplementær_enumverdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Komplementær_enumverdi { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Enum_verdi_tekst : Enum_verdi_base
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Verdi { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Enum_verdi_heltall : Enum_verdi_base
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Verdi { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Enum_verdi_flyttall : Enum_verdi_base
    {
        [Newtonsoft.Json.JsonProperty("verdi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Verdi { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegobjekttype
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stedfesting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Stedfesting { get; set; }

        /// <summary>
        /// Dato for når vegobjekttypen ble en del av objektlista. Om feltet ikke har noen verdi, er ikke vegobjekttypen en del av objektlista
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objektliste_dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Objektliste_dato { get; set; }

        /// <summary>
        /// Supplerende informasjon til beskrivelsen, for eksempel en registreringsveiledning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veiledning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Veiledning { get; set; }

        /// <summary>
        /// Navn som brukes i dataleveranser
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sosinvdbnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosinvdbnavn { get; set; }

        /// <summary>
        /// Navn som brukes i dataleveranser
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sosinavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sosinavn { get; set; }

        /// <summary>
        /// For bruk i sortering av objektlista
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sorteringsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sorteringsnummer { get; set; }

        /// <summary>
        /// Hvilke kategorier denne vegobjekttypen hører til
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kategorier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Kategorier> Kategorier { get; set; }

        [Newtonsoft.Json.JsonProperty("egenskapstyper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Innhold> Egenskapstyper { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relasjonstyper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Relasjonstyper> Relasjonstyper { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("hovedkategori", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hovedkategori { get; set; }

        /// <summary>
        /// Angir om eksisterende objekter skal bli automatisk splittet når de overlapper med nye objekter. true=Skal splittes, false=Skal ikke splittes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dekningsgrad", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dekningsgrad { get; set; }

        /// <summary>
        /// Angir om vegobjektene normalt har en gyldighetsperiode på operativt vegnett
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tidsrom_relevant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Tidsrom_relevant { get; set; }

        /// <summary>
        /// Angir om vegobjekter av denne typen skal kunne stedfestes på konnekteringslenker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("konnekteringslenke_ok", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Konnekteringslenke_ok { get; set; }

        /// <summary>
        /// Angir om vegobjekttype er abstrakt eller ikke. En abstrakt vegobjekttype skal ikke kunne ha forekomster i NVDB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abstrakt_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Abstrakt_type { get; set; }

        /// <summary>
        /// Angir hvorvidt vegobjektene må være tilknyttet et morobjekt for å kunne eksistere.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("må_ha_mor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Må_ha_mor { get; set; }

        [Newtonsoft.Json.JsonProperty("er_dataserie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Er_dataserie { get; set; }

        /// <summary>
        /// Angir om det er tillatt med kun én versjon av et vegobjekt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("en_versjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool En_versjon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "egenskapstype")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjekttypeRelasjon
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjekttypeRelasjonEnkel
    {
        [Newtonsoft.Json.JsonProperty("innenfor_mor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjekttypeRelasjonEnkelInnenfor_mor Innenfor_mor { get; set; }

        [Newtonsoft.Json.JsonProperty("relasjonstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VegobjekttypeRelasjonEnkelRelasjonstype Relasjonstype { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type3 Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegobjekttypeRelasjonListe
    {
        [Newtonsoft.Json.JsonProperty("innhold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjekttypeRelasjonEnkel Innhold { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VeglenkesekvensListeRespons
    {
        [Newtonsoft.Json.JsonProperty("objekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Veglenkesekvens> Objekter { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagineringMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VegnoderListeRespons
    {
        [Newtonsoft.Json.JsonProperty("objekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegnode> Objekter { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagineringMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VeglenkesegmentListeRespons
    {
        [Newtonsoft.Json.JsonProperty("objekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Veglenkesegment> Objekter { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagineringMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Veglenkesekvens
    {
        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("låst_lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Låst_lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("porter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Port> Porter { get; set; }

        [Newtonsoft.Json.JsonProperty("veglenker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Veglenker> Veglenker { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Port
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("relativPosisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RelativPosisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("tilkobling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tilkobling Tilkobling { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("HOVED", typeof(VeglenkeHoved))]
    [JsonInheritanceAttribute("DETALJERT", typeof(VeglenkeDetaljert))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Veglenke
    {
        [Newtonsoft.Json.JsonProperty("veglenkenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Veglenkenummer { get; set; }

        [Newtonsoft.Json.JsonProperty("startport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Startport { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sluttport { get; set; }

        [Newtonsoft.Json.JsonProperty("startposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Startposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Sluttposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometriBase Geometri { get; set; }

        [Newtonsoft.Json.JsonProperty("måledato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Måledato { get; set; }

        [Newtonsoft.Json.JsonProperty("målemetode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VeglenkeMålemetode Målemetode { get; set; }

        [Newtonsoft.Json.JsonProperty("detaljnivå", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Detaljniva Detaljnivå { get; set; }

        [Newtonsoft.Json.JsonProperty("typeVeg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeVeg TypeVeg { get; set; }

        [Newtonsoft.Json.JsonProperty("typeVeg_sosi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeVegSosi TypeVeg_sosi { get; set; }

        [Newtonsoft.Json.JsonProperty("startdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdato { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sluttdato { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VeglenkeHoved : Veglenke
    {
        [Newtonsoft.Json.JsonProperty("feltoversikt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Feltoversikt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VeglenkeDetaljert : Veglenke
    {
        [Newtonsoft.Json.JsonProperty("topologinivå", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Topologiniva Topologinivå { get; set; }

        [Newtonsoft.Json.JsonProperty("superstedfesting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Superstedfesting Superstedfesting { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Topologiniva
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Vegtrasé")]
        Vegtrasé = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kjørebane")]
        Kjørebane = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Kjørefelt")]
        Kjørefelt = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Detaljniva
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Vegtrase")]
        Vegtrase = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kjørebane")]
        Kjørebane = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Kjørefelt")]
        Kjørefelt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Vegtrase og kjørebane")]
        Vegtrase_og_kjørebane = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Veglenketype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HOVED")]
        HOVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DETALJERT")]
        DETALJERT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"KONNEKTERING")]
        KONNEKTERING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DETALJERT_KONNEKTERING")]
        DETALJERT_KONNEKTERING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Superstedfesting
    {
        [Newtonsoft.Json.JsonProperty("veglenkesekvens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvens { get; set; }

        [Newtonsoft.Json.JsonProperty("startposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Startposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Sluttposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("kjørefelt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Kjørefelt { get; set; }

        [Newtonsoft.Json.JsonProperty("sideposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sideposisjon Sideposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("retning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retning Retning { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Vegnode
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegnode
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("startdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdato { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sluttdato { get; set; }

        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometriBase Geometri { get; set; }

        [Newtonsoft.Json.JsonProperty("porter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Port> Porter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VeglenkesegmentBase
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        [Newtonsoft.Json.JsonProperty("startposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Startposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Sluttposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("kortform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortform { get; set; }

        [Newtonsoft.Json.JsonProperty("veglenkenummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Veglenkenummer { get; set; }

        [Newtonsoft.Json.JsonProperty("startnode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Startnode { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttnode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sluttnode { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Veglenketype Type { get; set; }

        [Newtonsoft.Json.JsonProperty("topologinivå", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Topologiniva Topologinivå { get; set; }

        [Newtonsoft.Json.JsonProperty("detaljnivå", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Detaljniva Detaljnivå { get; set; }

        [Newtonsoft.Json.JsonProperty("typeVeg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeVeg TypeVeg { get; set; }

        [Newtonsoft.Json.JsonProperty("typeVeg_sosi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeVegSosi TypeVeg_sosi { get; set; }

        [Newtonsoft.Json.JsonProperty("superstedfesting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Superstedfesting Superstedfesting { get; set; }

        [Newtonsoft.Json.JsonProperty("feltoversikt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Feltoversikt { get; set; }

        /// <summary>
        /// Objektets geometri på vegnettet, eller egengeometri. Tilstede dersom `inkluder=alle|geometri`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometri2 Geometri { get; set; }

        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("fylke", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Fylke { get; set; }

        [Newtonsoft.Json.JsonProperty("kommune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kommune { get; set; }

        [Newtonsoft.Json.JsonProperty("kontraktsområder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Kontraktsområde_i_objekt> Kontraktsområder { get; set; }

        [Newtonsoft.Json.JsonProperty("riksvegruter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Riksvegrute_i_objekt> Riksvegruter { get; set; }

        [Newtonsoft.Json.JsonProperty("gate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gate_i_objekt Gate { get; set; }

        [Newtonsoft.Json.JsonProperty("vegsystemreferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vegsystemreferanse Vegsystemreferanse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Veglenkesegment : VeglenkesegmentBase
    {
        [Newtonsoft.Json.JsonProperty("segmentnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Segmentnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("referanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referanse { get; set; }

        [Newtonsoft.Json.JsonProperty("måledato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Måledato { get; set; }

        [Newtonsoft.Json.JsonProperty("målemetode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VeglenkesegmentMålemetode Målemetode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class KortRuteDel
    {
        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        [Newtonsoft.Json.JsonProperty("startposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Startposisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Sluttposisjon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kommune
    {
        [Newtonsoft.Json.JsonProperty("fylke", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Fylke { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Fylke
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Riksvegrute_base
    {
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nummer { get; set; }

        [Newtonsoft.Json.JsonProperty("periode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Periode { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        /// <summary>
        /// Fylker riksvegruten dekker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fylker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Fylker { get; set; }

        /// <summary>
        /// Kommuner riksvegruten dekker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kommuner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Kommuner { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Riksvegrute_rev1 : Riksvegrute_base
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Riksvegrute_rev2 : Riksvegrute_base
    {
        [Newtonsoft.Json.JsonProperty("vegobjekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegobjekt_referanse> Vegobjekter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kontraktsomrade_base
    {
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Fylker kontraktsområdet dekker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fylker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Fylker { get; set; }

        /// <summary>
        /// Kommuner kontraktsområdet dekker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kommuner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Kommuner { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kontraktsomrade_rev1 : Kontraktsomrade_base
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kontraktsomrade_rev2 : Kontraktsomrade_base
    {
        [Newtonsoft.Json.JsonProperty("vegobjekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegobjekt_referanse> Vegobjekter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kontraktsområde_i_objekt
    {
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Riksvegrute_i_objekt
    {
        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("periode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Periode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Gate_i_objekt
    {
        /// <summary>
        /// Navnet på gaten
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        /// <summary>
        /// gatekode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gatekode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Gatekode { get; set; }

        /// <summary>
        /// Angir det er en sideveg og dermed bruker adresser fra lenken den er sideveg fra.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sideveg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sideveg { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Omrade_gate
    {
        /// <summary>
        /// Navnet på gaten
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        /// <summary>
        /// gatekode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gatekode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Gatekode { get; set; }

        /// <summary>
        /// Angir det er en sideveg og dermed bruker adresser fra lenken den er sideveg fra.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sideveg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sideveg { get; set; }

        /// <summary>
        /// Kommune gaten er i
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kommune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kommune { get; set; }

        [Newtonsoft.Json.JsonProperty("vegobjekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegobjekt_referanse> Vegobjekter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegobjekt_referanse
    {
        /// <summary>
        /// Vegobjektid
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Versjon av objektet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Versjon { get; set; }

        /// <summary>
        /// Vegobjekttype
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Posisjonsresultat
    {
        [Newtonsoft.Json.JsonProperty("vegsystemreferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vegsystemreferanse Vegsystemreferanse { get; set; }

        [Newtonsoft.Json.JsonProperty("veglenkesekvens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Veglenkesekvens2 Veglenkesekvens { get; set; }

        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometri3 Geometri { get; set; }

        /// <summary>
        /// Lengde i meter fra posisjonsoppslag
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avstand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Avstand { get; set; }

        [Newtonsoft.Json.JsonProperty("kommune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kommune { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransaksjonVegobjektMetadata : VegobjektMetadata
    {
        [Newtonsoft.Json.JsonProperty("transaksjonstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransaksjonVegobjektMetadataTransaksjonstype Transaksjonstype { get; set; }

    }

    /// <summary>
    /// Transaksjon i NVDB
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Transaksjon
    {
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TaskTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("tidspunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tidspunkt { get; set; }

        [Newtonsoft.Json.JsonProperty("objekter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VegobjektMetadata> Objekter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Brukerdetaljer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Innlogging
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("user_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InnloggingUser_type User_type { get; set; } = NVDB.Client.Generated.InnloggingUser_type.Employee;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// OIDC tokens
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Tokens
    {
        [Newtonsoft.Json.JsonProperty("idToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdToken { get; set; }

        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ruteberegningsrespons
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RuteRespons
    {
        [Newtonsoft.Json.JsonProperty("vegnettsrutesegmenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<KortRuteDel> Vegnettsrutesegmenter { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata2 Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RouteRequest
    {
        /// <summary>
        /// Startposisjon som et punkt eller posisjon@veglenkesekvens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }

        /// <summary>
        /// Sluttposisjon som et punkt eller posisjon@veglenkesekvens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slutt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Slutt { get; set; }

        /// <summary>
        /// Finn sammenhengende vegnett som passer med denne geometrien. Benytter punkt-til-punkt-beregning mellom alle punkter i geometrien.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geometri { get; set; }

        /// <summary>
        /// Maks avstand i meter til veglenker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maks_avstand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Maks_avstand { get; set; } = 10;

        /// <summary>
        /// Konvolutt lagt rund start- og slutt-punkt for å beregne rute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("omkrets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Omkrets { get; set; } = 100;

        /// <summary>
        /// Inkludere konnekteringslenker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("konnekteringslenker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Konnekteringslenker { get; set; } = false;

        /// <summary>
        /// Inkludere detaljerte lenker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detaljerte_lenker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Detaljerte_lenker { get; set; } = false;

        /// <summary>
        /// Returner minimal respons
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kortform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Kortform { get; set; } = false;

        /// <summary>
        /// Begrens søk innenfor vegreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vegsystemreferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vegsystemreferanse { get; set; }

        /// <summary>
        /// Begrens søk innenfor trafikantgruppe. Overstyrer behold_trafikantgruppe
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trafikantgruppe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trafikantgruppe { get; set; }

        /// <summary>
        /// Behold trafikantgruppe gjennom ruten. Trafikantgruppe velges fra første og siste punkt i ruten, om de er ulike velges K (kjørende)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("behold_trafikantgruppe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Behold_trafikantgruppe { get; set; } = false;

        /// <summary>
        /// Begrens søk innenfor typeveg
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeveg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Typeveg { get; set; }

        /// <summary>
        /// Søk i vegnett åpent på dette tidspunktet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tidspunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Tidspunkt { get; set; }

        /// <summary>
        /// Begrens vegnettgyldighet til denne startdatoen. Må brukes sammen med `tidspunkt_slutt`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tidspunkt_start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Tidspunkt_start { get; set; }

        /// <summary>
        /// Begrens vegnettgyldighet til denne sluttdatoen. Må brukes sammen med `tidspunkt_start`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tidspunkt_slutt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Tidspunkt_slutt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"metadata")]
        Metadata = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"egenskaper")]
        Egenskaper = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"relasjoner")]
        Relasjoner = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"lokasjon")]
        Lokasjon = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"vegsegmenter")]
        Vegsegmenter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"geometri")]
        Geometri = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"alle")]
        Alle = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"minimum")]
        Minimum = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Srid
    {

        [System.Runtime.Serialization.EnumMember(Value = @"5973")]
        _5973 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4326")]
        _4326 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"utm33")]
        Utm33 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"wgs84")]
        Wgs84 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Geometritoleranse
    {

        _10 = 10,

        _20 = 20,

        _30 = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Inkludergeometri
    {

        [System.Runtime.Serialization.EnumMember(Value = @"egenskap")]
        Egenskap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"lokasjon")]
        Lokasjon = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"utledet")]
        Utledet = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Inkluder_egenskaper
    {

        [System.Runtime.Serialization.EnumMember(Value = @"basis")]
        Basis = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"assosiasjon")]
        Assosiasjon = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stedfesting")]
        Stedfesting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"geometri")]
        Geometri = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"alle")]
        Alle = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"hoved")]
        Hoved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"konnektering")]
        Konnektering = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"detaljert")]
        Detaljert = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"detaljert_konnektering")]
        Detaljert_konnektering = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Adskiltelop
    {

        [System.Runtime.Serialization.EnumMember(Value = @"med")]
        Med = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nei")]
        Nei = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mot")]
        Mot = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"kanalisertVeg")]
        KanalisertVeg = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"enkelBilveg")]
        EnkelBilveg = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rampe")]
        Rampe = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"rundkjøring")]
        Rundkjøring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bilferje")]
        Bilferje = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"passasjerferje")]
        Passasjerferje = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"gangOgSykkelveg")]
        GangOgSykkelveg = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"sykkelveg")]
        Sykkelveg = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"gangveg")]
        Gangveg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"gågate")]
        Gågate = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"fortau")]
        Fortau = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"trapp")]
        Trapp = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"gangfelt")]
        Gangfelt = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"gatetun")]
        Gatetun = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"traktorveg")]
        Traktorveg = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"sti")]
        Sti = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"annet")]
        Annet = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Detaljniva2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VT")]
        VT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"KB")]
        KB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"KF")]
        KF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VTKB")]
        VTKB = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Trafikantgruppe
    {

        [System.Runtime.Serialization.EnumMember(Value = @"K")]
        K = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Dybde
    {

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"$n")]
        _n = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"full")]
        Full = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Inkluder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"egenskapstyper")]
        Egenskapstyper = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relasjonstyper")]
        Relasjonstyper = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stedfesting")]
        Stedfesting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"alle")]
        Alle = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Inkluder2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"egenskapstyper")]
        Egenskapstyper = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relasjonstyper")]
        Relasjonstyper = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stedfesting")]
        Stedfesting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"alle")]
        Alle = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Topologinivå
    {

        [System.Runtime.Serialization.EnumMember(Value = @"vegtrase")]
        Vegtrase = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"kjørebane")]
        Kjørebane = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"kjørefelt")]
        Kjørefelt = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"kartutsnitt")]
        Kartutsnitt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"senterpunkt")]
        Senterpunkt = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vegobjekt")]
        Vegobjekt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"alle")]
        Alle = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"vegobjekt")]
        Vegobjekt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"alle")]
        Alle = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body
    {
        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous6
    {
        /// <summary>
        /// Navn på resurs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        /// <summary>
        /// Absolutt url til resurs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous7
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous8
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous9
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        [Newtonsoft.Json.JsonProperty("sorteringsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sorteringsnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        [Newtonsoft.Json.JsonProperty("startdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdato { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Dato { get; set; }

        [Newtonsoft.Json.JsonProperty("versjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Versjon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous10
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("kortnavn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortnavn { get; set; }

        [Newtonsoft.Json.JsonProperty("sorteringsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sorteringsnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous11
    {
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous12
    {
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("gater", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Omrade_gate> Gater { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagineringMetadata Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response3
    {
        [Newtonsoft.Json.JsonProperty("datagrunnlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datagrunnlag Datagrunnlag { get; set; }

        /// <summary>
        /// Hvilken oppgave indekseringsprosessen behandler
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kjorende_oppgave", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kjorende_oppgave Kjorende_oppgave { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Type
    {
        /// <summary>
        /// vegobjekttypens unike id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// vegobjekttypens offisielle navn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Geometri
    {
        [Newtonsoft.Json.JsonProperty("wkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wkt { get; set; }

        /// <summary>
        /// Hvilket geografiske referansesystem koordinatene er i
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeometriSrid Srid { get; set; }

        /// <summary>
        /// Angir om geometrien er vegobjektets egengeometri, eller om geometrien er utledet fra vegnettes geometri
        /// </summary>
        [Newtonsoft.Json.JsonProperty("egengeometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Egengeometri { get; set; }

        /// <summary>
        /// tilstede dersom `geometritoleranse` er spesifisert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forenklet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Forenklet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Lokasjon
    {
        /// <summary>
        /// Kommuner dette objektet er stedfestet i.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kommuner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Kommuner { get; set; }

        /// <summary>
        /// Fylker dette objektet er stedfestet i.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fylker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Fylker { get; set; }

        /// <summary>
        /// Kontrakter stedfestet på samme sted som dette objektet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kontrakter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Kontraktsområde_i_objekt> Kontrakter { get; set; }

        /// <summary>
        /// Riksvegruter stedfestet på samme sted som dette objektet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riksvegruter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Riksvegrute_i_objekt> Riksvegruter { get; set; }

        /// <summary>
        /// Gater stedfestet på samme sted som dette objektet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gater", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gate_i_objekt> Gater { get; set; }

        /// <summary>
        /// Vegsystemreferanser der objektet er stedfestet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vegsystemreferanser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vegsystemreferanse> Vegsystemreferanser { get; set; }

        /// <summary>
        /// Stedfestinger til vegnettet for objektet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stedfestinger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Stedfestinger> Stedfestinger { get; set; }

        /// <summary>
        /// Lengden objektet har på vegnettet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Relasjoner
    {
        /// <summary>
        /// Objekter som peker på dette objektet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreldre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Relasjon> Foreldre { get; set; }

        /// <summary>
        /// Objekter dette objektet peker på, assosiasjonsegenskaper dette objektet har.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Relasjon> Barn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegsegmenter
    {
        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        /// <summary>
        /// Relativ posisjon på veglenkesekvens dersom dette er et punkt
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relativPosisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RelativPosisjon { get; set; }

        /// <summary>
        /// Startposisjon på veglenkesekvens
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Startposisjon { get; set; }

        /// <summary>
        /// Sluttposisjon på veglenkesekvens
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sluttposisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Sluttposisjon { get; set; }

        /// <summary>
        /// Segmentets lengde
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        [Newtonsoft.Json.JsonProperty("veglenkeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegsegmenterVeglenkeType VeglenkeType { get; set; }

        [Newtonsoft.Json.JsonProperty("detaljnivå", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegsegmenterDetaljnivå Detaljnivå { get; set; }

        [Newtonsoft.Json.JsonProperty("typeVeg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeVeg TypeVeg { get; set; }

        [Newtonsoft.Json.JsonProperty("typeVeg_Sosi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeVegSosi TypeVeg_Sosi { get; set; }

        [Newtonsoft.Json.JsonProperty("startdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdato { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sluttdato { get; set; }

        /// <summary>
        /// Segmentets geometri
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geometri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometri4 Geometri { get; set; }

        [Newtonsoft.Json.JsonProperty("fylke", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Fylke { get; set; }

        [Newtonsoft.Json.JsonProperty("kommune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kommune { get; set; }

        [Newtonsoft.Json.JsonProperty("vegsystemreferanse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vegsystemreferanse Vegsystemreferanse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Vegsystem
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        [Newtonsoft.Json.JsonProperty("vegkategori", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vegkategori { get; set; }

        [Newtonsoft.Json.JsonProperty("fase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fase { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Strekning : MeterReferanse
    {
        /// <summary>
        /// Fraværende for objekters vegsystemreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Fraværende for objekters vegsystemreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        [Newtonsoft.Json.JsonProperty("strekning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Strekning1 { get; set; }

        [Newtonsoft.Json.JsonProperty("delstrekning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Delstrekning { get; set; }

        [Newtonsoft.Json.JsonProperty("arm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Arm { get; set; }

        [Newtonsoft.Json.JsonProperty("adskilte_løp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StrekningAdskilte_løp Adskilte_løp { get; set; }

        [Newtonsoft.Json.JsonProperty("adskilte_løp_nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adskilte_løp_nummer { get; set; }

        [Newtonsoft.Json.JsonProperty("trafikantgruppe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StrekningTrafikantgruppe Trafikantgruppe { get; set; }

        [Newtonsoft.Json.JsonProperty("retning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retning Retning { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kryssystem : MeterReferanse
    {
        /// <summary>
        /// Fraværende for objekters vegsystemreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Fraværende for objekters vegsystemreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        [Newtonsoft.Json.JsonProperty("kryssystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kryssystem1 { get; set; }

        [Newtonsoft.Json.JsonProperty("kryssdel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kryssdel { get; set; }

        [Newtonsoft.Json.JsonProperty("trafikantgruppe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KryssystemTrafikantgruppe Trafikantgruppe { get; set; }

        [Newtonsoft.Json.JsonProperty("retning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retning Retning { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Sidealegg : MeterReferanse
    {
        /// <summary>
        /// Fraværende for objekters vegsystemreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Fraværende for objekters vegsystemreferanse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        [Newtonsoft.Json.JsonProperty("sideanlegg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sideanlegg { get; set; }

        [Newtonsoft.Json.JsonProperty("sideanleggsdel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sideanleggsdel { get; set; }

        [Newtonsoft.Json.JsonProperty("trafikantgruppe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SidealeggTrafikantgruppe Trafikantgruppe { get; set; }

        [Newtonsoft.Json.JsonProperty("retning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retning Retning { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Type2
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektEgenskapGeometriMedium
    {

        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"U")]
        U = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"V")]
        V = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"J")]
        J = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"X")]
        X = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektEgenskapGeometriMedium_nvdb
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektEgenskapGeometriTemakode
    {

        _7001 = 7001,

        _7004 = 7004,

        _7012 = 7012,

        _7011 = 7011,

        _7010 = 7010,

        _7201 = 7201,

        _7042 = 7042,

        _7043 = 7043,

        _7046 = 7046,

        _6304 = 6304,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektEgenskapStedfestingStedfestingstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Punkt")]
        Punkt = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektEgenskapStedfestingLinjeStedfestingstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Linje")]
        Linje = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Anonymous13
    {
        [Newtonsoft.Json.JsonProperty("stedfestingstype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Stedfestingstype Stedfestingstype { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Nodeid { get; set; }

        [Newtonsoft.Json.JsonProperty("startpunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektEgenskapStedfesting Startpunkt { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttpunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VegobjektEgenskapStedfesting Sluttpunkt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum GeometriKvalitetMålemetode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Terrengmålt")]
        Terrengmålt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fastsatt ved dom eller kongelig resolusjon")]
        Fastsatt_ved_dom_eller_kongelig_resolusjon = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Flere, som ikke listes ut her.")]
        Flere__som_ikke_listes_ut_her_ = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum GeometriKvalitetSynbarhet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ikke registrert")]
        Ikke_registrert = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fullt ut synlig/gjenfinnbar i terrenget")]
        Fullt_ut_synlig_gjenfinnbar_i_terrenget = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Dårlig gjenfinnbar i terreng")]
        Dårlig_gjenfinnbar_i_terreng = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Middels synlig i flybilde/modell")]
        Middels_synlig_i_flybilde_modell = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Dårlig/ikke synlig i flybilde/modell")]
        Dårlig_ikke_synlig_i_flybilde_modell = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum GeometriKvalitetMålemetodeHøyde
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Spesielle metoder")]
        Spesielle_metoder = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ikke registrert")]
        Ikke_registrert = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Flere, ikke listet ut her.")]
        Flere__ikke_listet_ut_her_ = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Neste
    {
        /// <summary>
        /// Token som brukes for å få neste side
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }

        /// <summary>
        /// Komplett url for neste side
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapBaseSensitivitet
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapBaseViktighet
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IKKE_SATT")]
        IKKE_SATT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PÅKREVD_ABSOLUTT -Et vegobjekt kan ikke lagres i NVDB uten at denne egenskapstypen har verdi")]
        PÅKREVD_ABSOLUTT_Et_vegobjekt_kan_ikke_lagres_i_NVDB_uten_at_denne_egenskapstypen_har_verdi = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PÅKREVD_IKKE_ABSOLUTT - Egenskapstypen skal registreres, men vegobjekter som mangler verdi skal ikke avvises")]
        PÅKREVD_IKKE_ABSOLUTT__Egenskapstypen_skal_registreres__men_vegobjekter_som_mangler_verdi_skal_ikke_avvises = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BETINGET - Egenskapstypens skal registreres, dersom det er relevant eller om gitte kriterier er oppfylt")]
        BETINGET__Egenskapstypens_skal_registreres__dersom_det_er_relevant_eller_om_gitte_kriterier_er_oppfylt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OPSJONELL - Det er frivillig å registrere egenskapstypen")]
        OPSJONELL__Det_er_frivillig_å_registrere_egenskapstypen = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MINDRE_VIKTIG - Det er frivillig å registrere egenskapstypen")]
        MINDRE_VIKTIG__Det_er_frivillig_å_registrere_egenskapstypen = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HISTORISK - Egenskapstypen skal ikke registreres")]
        HISTORISK__Egenskapstypen_skal_ikke_registreres = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapGeometriGeometritype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUNKT")]
        PUNKT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POLYGON")]
        POLYGON = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LINJE")]
        LINJE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FLERELINJE")]
        FLERELINJE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FLEREPUNKT")]
        FLEREPUNKT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FLEREPOLYGON")]
        FLEREPOLYGON = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"KOMPLEKS")]
        KOMPLEKS = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapStedfestingStedfestingstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Punkt")]
        Punkt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linje")]
        Linje = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sving")]
        Sving = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapStedfestingGeometritype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Punkt")]
        Punkt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linje")]
        Linje = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sving")]
        Sving = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapStedfestingKjørefelt_relevant
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KAN")]
        KAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEI")]
        NEI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MÅ")]
        MÅ = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapStedfestingSideposisjon_relevant
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KAN")]
        KAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEI")]
        NEI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MÅ")]
        MÅ = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjektTypeEgenskapStedfestingVegnettsajourhold_splitt
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IKKE_TATT_STILLING")]
        IKKE_TATT_STILLING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"KAN_IKKE_SPLITTES")]
        KAN_IKKE_SPLITTES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"KAN_SPLITTES")]
        KAN_SPLITTES = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kategorier
    {
        [Newtonsoft.Json.JsonProperty("primærkategori", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Primærkategori { get; set; }

        [Newtonsoft.Json.JsonProperty("nummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Nummer { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Relasjonstyper
    {
        [Newtonsoft.Json.JsonProperty("foreldre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VegobjekttypeRelasjon> Foreldre { get; set; }

        [Newtonsoft.Json.JsonProperty("barn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VegobjekttypeRelasjon> Barn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjekttypeRelasjonEnkelInnenfor_mor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JA")]
        JA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEI")]
        NEI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MED_AVVIK")]
        MED_AVVIK = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegobjekttypeRelasjonEnkelRelasjonstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ASSOSIASJON")]
        ASSOSIASJON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AGGREGERING")]
        AGGREGERING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"KOMPOSISJON")]
        KOMPOSISJON = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TOPOLOGI")]
        TOPOLOGI = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Type3
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("objektliste_dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Objektliste_dato { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Veglenker
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Tilkobling
    {
        [Newtonsoft.Json.JsonProperty("portnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Portnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Nodeid { get; set; }

        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VeglenkeMålemetode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Metrert")]
        Metrert = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Geometrisk")]
        Geometrisk = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Metadata
    {
        [Newtonsoft.Json.JsonProperty("startdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdato { get; set; }

        [Newtonsoft.Json.JsonProperty("sluttdato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Sluttdato { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Geometri2
    {
        [Newtonsoft.Json.JsonProperty("wkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wkt { get; set; }

        /// <summary>
        /// Hvilket geografiske referansesystem koordinatene er i
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometri2Srid Srid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VeglenkesegmentMålemetode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Metrert")]
        Metrert = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Geometrisk")]
        Geometrisk = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Veglenkesekvens2
    {
        [Newtonsoft.Json.JsonProperty("veglenkesekvensid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Veglenkesekvensid { get; set; }

        [Newtonsoft.Json.JsonProperty("relativPosisjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RelativPosisjon { get; set; }

        [Newtonsoft.Json.JsonProperty("kortform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kortform { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Geometri3
    {
        [Newtonsoft.Json.JsonProperty("wkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wkt { get; set; }

        [Newtonsoft.Json.JsonProperty("srid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Srid { get; set; } = 5973;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum TransaksjonVegobjektMetadataTransaksjonstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MODIFIED")]
        MODIFIED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum InnloggingUser_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"employee")]
        Employee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"serviceaccount")]
        Serviceaccount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"external")]
        External = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Metadata2
    {
        /// <summary>
        /// Antall rutedeler
        /// </summary>
        [Newtonsoft.Json.JsonProperty("antall", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Antall { get; set; }

        /// <summary>
        /// Rutas lengde i meter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lengde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Lengde { get; set; }

        /// <summary>
        /// Statuskode for returnert rute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Status { get; set; }

        /// <summary>
        /// Statuskode i tekstform for returnert rute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status_tekst", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_tekst { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Datagrunnlag
    {
        [Newtonsoft.Json.JsonProperty("datakatalog", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Datakatalog Datakatalog { get; set; }

        [Newtonsoft.Json.JsonProperty("sist_oppdatert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sist_oppdatert { get; set; }

        [Newtonsoft.Json.JsonProperty("sist_prosesserte_transaksjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sist_prosesserte_transaksjon Sist_prosesserte_transaksjon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Kjorende_oppgave
    {
        [Newtonsoft.Json.JsonProperty("oppgave", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oppgave { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum GeometriSrid
    {

        _5973 = 5973,

        _4326 = 4326,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegsegmenterVeglenkeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HOVED")]
        HOVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DETALJERT")]
        DETALJERT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"KONNEKTERING")]
        KONNEKTERING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DETALJERT_KONNEKTERING")]
        DETALJERT_KONNEKTERING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VegsegmenterDetaljnivå
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Vegtrase")]
        Vegtrase = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Kjørebane")]
        Kjørebane = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Kjørefelt")]
        Kjørefelt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Vegtrase og kjørebane")]
        Vegtrase_og_kjørebane = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Geometri4
    {
        [Newtonsoft.Json.JsonProperty("wkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wkt { get; set; }

        /// <summary>
        /// Hvilket geografiske referansesystem koordinatene er i
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Geometri4Srid Srid { get; set; }

        /// <summary>
        /// tilstede dersom `geometritoleranse` er spesifisert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forenklet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Forenklet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StrekningAdskilte_løp
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Med")]
        Med = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Mot")]
        Mot = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Nei")]
        Nei = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StrekningTrafikantgruppe
    {

        [System.Runtime.Serialization.EnumMember(Value = @"K")]
        K = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum KryssystemTrafikantgruppe
    {

        [System.Runtime.Serialization.EnumMember(Value = @"K")]
        K = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum SidealeggTrafikantgruppe
    {

        [System.Runtime.Serialization.EnumMember(Value = @"K")]
        K = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Stedfestingstype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sving")]
        Sving = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Geometri2Srid
    {

        _5973 = 5973,

        _4326 = 4326,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Datakatalog
    {
        [Newtonsoft.Json.JsonProperty("dato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Dato { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("versjon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Versjon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Sist_prosesserte_transaksjon
    {
        [Newtonsoft.Json.JsonProperty("transaksjonsid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Transaksjonsid { get; set; }

        [Newtonsoft.Json.JsonProperty("transaksjonstidspunkt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaksjonstidspunkt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Geometri4Srid
    {

        _5973 = 5973,

        _4326 = 4326,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603